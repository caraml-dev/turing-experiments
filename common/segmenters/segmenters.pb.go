// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: api/proto/segmenters.proto

package segmenters

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SegmenterValueType represents the possible types that segmenter values can
// take.
type SegmenterValueType int32

const (
	SegmenterValueType_STRING  SegmenterValueType = 0
	SegmenterValueType_BOOL    SegmenterValueType = 1
	SegmenterValueType_INTEGER SegmenterValueType = 2
	SegmenterValueType_REAL    SegmenterValueType = 3
)

// Enum value maps for SegmenterValueType.
var (
	SegmenterValueType_name = map[int32]string{
		0: "STRING",
		1: "BOOL",
		2: "INTEGER",
		3: "REAL",
	}
	SegmenterValueType_value = map[string]int32{
		"STRING":  0,
		"BOOL":    1,
		"INTEGER": 2,
		"REAL":    3,
	}
)

func (x SegmenterValueType) Enum() *SegmenterValueType {
	p := new(SegmenterValueType)
	*p = x
	return p
}

func (x SegmenterValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmenterValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_segmenters_proto_enumTypes[0].Descriptor()
}

func (SegmenterValueType) Type() protoreflect.EnumType {
	return &file_api_proto_segmenters_proto_enumTypes[0]
}

func (x SegmenterValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmenterValueType.Descriptor instead.
func (SegmenterValueType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{0}
}

// SegmenterValue represents a single value of a segmenter
type SegmenterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*SegmenterValue_String_
	//	*SegmenterValue_Bool
	//	*SegmenterValue_Integer
	//	*SegmenterValue_Real
	Value isSegmenterValue_Value `protobuf_oneof:"value"`
}

func (x *SegmenterValue) Reset() {
	*x = SegmenterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_segmenters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmenterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmenterValue) ProtoMessage() {}

func (x *SegmenterValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_segmenters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmenterValue.ProtoReflect.Descriptor instead.
func (*SegmenterValue) Descriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{0}
}

func (m *SegmenterValue) GetValue() isSegmenterValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SegmenterValue) GetString_() string {
	if x, ok := x.GetValue().(*SegmenterValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *SegmenterValue) GetBool() bool {
	if x, ok := x.GetValue().(*SegmenterValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *SegmenterValue) GetInteger() int64 {
	if x, ok := x.GetValue().(*SegmenterValue_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *SegmenterValue) GetReal() float64 {
	if x, ok := x.GetValue().(*SegmenterValue_Real); ok {
		return x.Real
	}
	return 0
}

type isSegmenterValue_Value interface {
	isSegmenterValue_Value()
}

type SegmenterValue_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}

type SegmenterValue_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type SegmenterValue_Integer struct {
	Integer int64 `protobuf:"zigzag64,3,opt,name=integer,proto3,oneof"`
}

type SegmenterValue_Real struct {
	Real float64 `protobuf:"fixed64,4,opt,name=real,proto3,oneof"`
}

func (*SegmenterValue_String_) isSegmenterValue_Value() {}

func (*SegmenterValue_Bool) isSegmenterValue_Value() {}

func (*SegmenterValue_Integer) isSegmenterValue_Value() {}

func (*SegmenterValue_Real) isSegmenterValue_Value() {}

// ListSegmenterValue is a list of SegmenterValue
type ListSegmenterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*SegmenterValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListSegmenterValue) Reset() {
	*x = ListSegmenterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_segmenters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSegmenterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSegmenterValue) ProtoMessage() {}

func (x *ListSegmenterValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_segmenters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSegmenterValue.ProtoReflect.Descriptor instead.
func (*ListSegmenterValue) Descriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{1}
}

func (x *ListSegmenterValue) GetValues() []*SegmenterValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// PreRequisite represents a single requirement related to a free segmenter
type PreRequisite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// segmenter_name is the name of the free segmenter. This must be
	// single-valued.
	SegmenterName string `protobuf:"bytes,1,opt,name=segmenter_name,json=segmenterName,proto3" json:"segmenter_name,omitempty"`
	// segmenter_values is the set of values of the pre-requisite segmenter, one
	// of which must be matched.
	SegmenterValues *ListSegmenterValue `protobuf:"bytes,2,opt,name=segmenter_values,json=segmenterValues,proto3" json:"segmenter_values,omitempty"`
}

func (x *PreRequisite) Reset() {
	*x = PreRequisite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_segmenters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreRequisite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreRequisite) ProtoMessage() {}

func (x *PreRequisite) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_segmenters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreRequisite.ProtoReflect.Descriptor instead.
func (*PreRequisite) Descriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{2}
}

func (x *PreRequisite) GetSegmenterName() string {
	if x != nil {
		return x.SegmenterName
	}
	return ""
}

func (x *PreRequisite) GetSegmenterValues() *ListSegmenterValue {
	if x != nil {
		return x.SegmenterValues
	}
	return nil
}

// Constraint captures a set of requirements that must be met for the use of
// certain segmenter values.
type Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pre_requisites is the list of conditions, all of which must be matched for
	// the use of the allowed_values of the current segmenter.
	PreRequisites []*PreRequisite `protobuf:"bytes,1,rep,name=pre_requisites,json=preRequisites,proto3" json:"pre_requisites,omitempty"`
	// allowed_values is the list of values of the current segmenter that are
	// available when all the pre-requisites are satisfied.
	AllowedValues *ListSegmenterValue `protobuf:"bytes,2,opt,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	// options is an optional map of the segmenter values (human-readable name ->
	// internal value) applicable under the current constraint that, if set,
	// overrides the global options map
	Options map[string]*SegmenterValue `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_segmenters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_segmenters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{3}
}

func (x *Constraint) GetPreRequisites() []*PreRequisite {
	if x != nil {
		return x.PreRequisites
	}
	return nil
}

func (x *Constraint) GetAllowedValues() *ListSegmenterValue {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

func (x *Constraint) GetOptions() map[string]*SegmenterValue {
	if x != nil {
		return x.Options
	}
	return nil
}

// ExperimentVariables represents a combination of experiment variables name that a segmenter can derrive from
type ExperimentVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ExperimentVariables) Reset() {
	*x = ExperimentVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_segmenters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentVariables) ProtoMessage() {}

func (x *ExperimentVariables) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_segmenters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentVariables.ProtoReflect.Descriptor instead.
func (*ExperimentVariables) Descriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{4}
}

func (x *ExperimentVariables) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// ListExperimentVariables is a list of ExperimentVariables, each of which can be used to derive a segmenter
type ListExperimentVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ExperimentVariables `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListExperimentVariables) Reset() {
	*x = ListExperimentVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_segmenters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentVariables) ProtoMessage() {}

func (x *ListExperimentVariables) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_segmenters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentVariables.ProtoReflect.Descriptor instead.
func (*ListExperimentVariables) Descriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{5}
}

func (x *ListExperimentVariables) GetValues() []*ExperimentVariables {
	if x != nil {
		return x.Values
	}
	return nil
}

// SegmenterConfiguration holds the configuration for a segmenter
type SegmenterConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the human-readable name of the segmenter. This must be unique
	// across various segmenters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the type of the segmenter's values. All values of a segmenter
	// should be of the same type.
	Type SegmenterValueType `protobuf:"varint,2,opt,name=type,proto3,enum=segmenters.SegmenterValueType" json:"type,omitempty"`
	// options is an optional map of the segmenter values (human-readable name ->
	// internal value)
	Options map[string]*SegmenterValue `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// multi_valued represents whether multiple values of the segmenter can be
	// chosen in an experiment. Only single-valued segmenters can act as
	// pre-requisites.
	MultiValued bool `protobuf:"varint,4,opt,name=multi_valued,json=multiValued,proto3" json:"multi_valued,omitempty"`
	// treatment_request_fields is the name of the field(s) in the fetch treatment
	// request that can be used to determine the value of the segmenter. This can
	// be the segmenter value as is (in which case, this field can be left empty
	// and the segmenter's name will be used to match the data in the incoming
	// request), or one or more other attributes that can be used to compute the
	// segmenter's value. Eg: A segmenter that checks whether the current month
	// has 31 days only needs the timezone of the request to be supplied.
	TreatmentRequestFields *ListExperimentVariables `protobuf:"bytes,5,opt,name=treatment_request_fields,json=treatmentRequestFields,proto3" json:"treatment_request_fields,omitempty"`
	// constraints captures an optional list of rules. Each constraint has one or
	// more pre-requisite conditions, which when satisfied, narrows the list of
	// available values for the current segmenter. If none of the constraints are
	// satisfied, all values of the segmenter described by the options field may
	// be applicable.
	Constraints []*Constraint `protobuf:"bytes,6,rep,name=constraints,proto3" json:"constraints,omitempty"`
	// required represents whether the segmenter must be chosen in an experiment
	Required bool `protobuf:"varint,7,opt,name=required,proto3" json:"required,omitempty"`
	// additional information about segmenter
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SegmenterConfiguration) Reset() {
	*x = SegmenterConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_segmenters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmenterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmenterConfiguration) ProtoMessage() {}

func (x *SegmenterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_segmenters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmenterConfiguration.ProtoReflect.Descriptor instead.
func (*SegmenterConfiguration) Descriptor() ([]byte, []int) {
	return file_api_proto_segmenters_proto_rawDescGZIP(), []int{6}
}

func (x *SegmenterConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SegmenterConfiguration) GetType() SegmenterValueType {
	if x != nil {
		return x.Type
	}
	return SegmenterValueType_STRING
}

func (x *SegmenterConfiguration) GetOptions() map[string]*SegmenterValue {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SegmenterConfiguration) GetMultiValued() bool {
	if x != nil {
		return x.MultiValued
	}
	return false
}

func (x *SegmenterConfiguration) GetTreatmentRequestFields() *ListExperimentVariables {
	if x != nil {
		return x.TreatmentRequestFields
	}
	return nil
}

func (x *SegmenterConfiguration) GetConstraints() []*Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *SegmenterConfiguration) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SegmenterConfiguration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_api_proto_segmenters_proto protoreflect.FileDescriptor

var file_api_proto_segmenters_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x0e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x56, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2b, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xfd, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x64, 0x12, 0x5d, 0x0a, 0x18, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x16, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x56, 0x0a, 0x0c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0x41, 0x0a, 0x12, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45,
	0x41, 0x4c, 0x10, 0x03, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6a, 0x65, 0x6b, 0x2f, 0x78, 0x70, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_segmenters_proto_rawDescOnce sync.Once
	file_api_proto_segmenters_proto_rawDescData = file_api_proto_segmenters_proto_rawDesc
)

func file_api_proto_segmenters_proto_rawDescGZIP() []byte {
	file_api_proto_segmenters_proto_rawDescOnce.Do(func() {
		file_api_proto_segmenters_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_segmenters_proto_rawDescData)
	})
	return file_api_proto_segmenters_proto_rawDescData
}

var file_api_proto_segmenters_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_segmenters_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_proto_segmenters_proto_goTypes = []interface{}{
	(SegmenterValueType)(0),         // 0: segmenters.SegmenterValueType
	(*SegmenterValue)(nil),          // 1: segmenters.SegmenterValue
	(*ListSegmenterValue)(nil),      // 2: segmenters.ListSegmenterValue
	(*PreRequisite)(nil),            // 3: segmenters.PreRequisite
	(*Constraint)(nil),              // 4: segmenters.Constraint
	(*ExperimentVariables)(nil),     // 5: segmenters.ExperimentVariables
	(*ListExperimentVariables)(nil), // 6: segmenters.ListExperimentVariables
	(*SegmenterConfiguration)(nil),  // 7: segmenters.SegmenterConfiguration
	nil,                             // 8: segmenters.Constraint.OptionsEntry
	nil,                             // 9: segmenters.SegmenterConfiguration.OptionsEntry
}
var file_api_proto_segmenters_proto_depIdxs = []int32{
	1,  // 0: segmenters.ListSegmenterValue.values:type_name -> segmenters.SegmenterValue
	2,  // 1: segmenters.PreRequisite.segmenter_values:type_name -> segmenters.ListSegmenterValue
	3,  // 2: segmenters.Constraint.pre_requisites:type_name -> segmenters.PreRequisite
	2,  // 3: segmenters.Constraint.allowed_values:type_name -> segmenters.ListSegmenterValue
	8,  // 4: segmenters.Constraint.options:type_name -> segmenters.Constraint.OptionsEntry
	5,  // 5: segmenters.ListExperimentVariables.values:type_name -> segmenters.ExperimentVariables
	0,  // 6: segmenters.SegmenterConfiguration.type:type_name -> segmenters.SegmenterValueType
	9,  // 7: segmenters.SegmenterConfiguration.options:type_name -> segmenters.SegmenterConfiguration.OptionsEntry
	6,  // 8: segmenters.SegmenterConfiguration.treatment_request_fields:type_name -> segmenters.ListExperimentVariables
	4,  // 9: segmenters.SegmenterConfiguration.constraints:type_name -> segmenters.Constraint
	1,  // 10: segmenters.Constraint.OptionsEntry.value:type_name -> segmenters.SegmenterValue
	1,  // 11: segmenters.SegmenterConfiguration.OptionsEntry.value:type_name -> segmenters.SegmenterValue
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_proto_segmenters_proto_init() }
func file_api_proto_segmenters_proto_init() {
	if File_api_proto_segmenters_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_segmenters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmenterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_segmenters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSegmenterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_segmenters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreRequisite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_segmenters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_segmenters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_segmenters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExperimentVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_segmenters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmenterConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_segmenters_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SegmenterValue_String_)(nil),
		(*SegmenterValue_Bool)(nil),
		(*SegmenterValue_Integer)(nil),
		(*SegmenterValue_Real)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_segmenters_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_segmenters_proto_goTypes,
		DependencyIndexes: file_api_proto_segmenters_proto_depIdxs,
		EnumInfos:         file_api_proto_segmenters_proto_enumTypes,
		MessageInfos:      file_api_proto_segmenters_proto_msgTypes,
	}.Build()
	File_api_proto_segmenters_proto = out.File
	file_api_proto_segmenters_proto_rawDesc = nil
	file_api_proto_segmenters_proto_goTypes = nil
	file_api_proto_segmenters_proto_depIdxs = nil
}
