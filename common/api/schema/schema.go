// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ExperimentField.
const (
	ExperimentFieldEndTime ExperimentField = "end_time"

	ExperimentFieldId ExperimentField = "id"

	ExperimentFieldName ExperimentField = "name"

	ExperimentFieldStartTime ExperimentField = "start_time"

	ExperimentFieldStatusFriendly ExperimentField = "status_friendly"

	ExperimentFieldTier ExperimentField = "tier"

	ExperimentFieldTreatments ExperimentField = "treatments"

	ExperimentFieldType ExperimentField = "type"

	ExperimentFieldUpdatedAt ExperimentField = "updated_at"
)

// Defines values for ExperimentStatus.
const (
	ExperimentStatusActive ExperimentStatus = "active"

	ExperimentStatusInactive ExperimentStatus = "inactive"
)

// Defines values for ExperimentStatusFriendly.
const (
	ExperimentStatusFriendlyCompleted ExperimentStatusFriendly = "completed"

	ExperimentStatusFriendlyDeactivated ExperimentStatusFriendly = "deactivated"

	ExperimentStatusFriendlyRunning ExperimentStatusFriendly = "running"

	ExperimentStatusFriendlyScheduled ExperimentStatusFriendly = "scheduled"
)

// Defines values for ExperimentTier.
const (
	ExperimentTierDefault ExperimentTier = "default"

	ExperimentTierOverride ExperimentTier = "override"
)

// Defines values for ExperimentType.
const (
	ExperimentTypeAB ExperimentType = "A/B"

	ExperimentTypeSwitchback ExperimentType = "Switchback"
)

// Defines values for SegmentField.
const (
	SegmentFieldId SegmentField = "id"

	SegmentFieldName SegmentField = "name"
)

// Defines values for SegmenterScope.
const (
	SegmenterScopeGlobal SegmenterScope = "global"

	SegmenterScopeProject SegmenterScope = "project"
)

// Defines values for SegmenterStatus.
const (
	SegmenterStatusActive SegmenterStatus = "active"

	SegmenterStatusInactive SegmenterStatus = "inactive"
)

// Defines values for SegmenterType.
const (
	SegmenterTypeBool SegmenterType = "bool"

	SegmenterTypeInteger SegmenterType = "integer"

	SegmenterTypeReal SegmenterType = "real"

	SegmenterTypeString SegmenterType = "string"
)

// Defines values for TreatmentField.
const (
	TreatmentFieldId TreatmentField = "id"

	TreatmentFieldName TreatmentField = "name"
)

// Constraint defines model for Constraint.
type Constraint struct {
	AllowedValues []SegmenterValues `json:"allowed_values"`
	Options       *SegmenterOptions `json:"options,omitempty"`
	PreRequisites []PreRequisite    `json:"pre_requisites"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Error   string `json:"error"`
	Message string `json:"message"`
}

// Experiment defines model for Experiment.
type Experiment struct {
	CreatedAt   *time.Time         `json:"created_at,omitempty"`
	Description *string            `json:"description"`
	EndTime     *time.Time         `json:"end_time,omitempty"`
	Id          *int64             `json:"id,omitempty"`
	Interval    *int32             `json:"interval"`
	Name        *string            `json:"name,omitempty"`
	ProjectId   *int64             `json:"project_id,omitempty"`
	Segment     *ExperimentSegment `json:"segment,omitempty"`
	StartTime   *time.Time         `json:"start_time,omitempty"`
	Status      *ExperimentStatus  `json:"status,omitempty"`

	// The user-friendly classification of experiment statuses. The categories are
	// self-explanatory. Note that the current time plays a role in the definition
	// of some of these statuses.
	StatusFriendly *ExperimentStatusFriendly `json:"status_friendly,omitempty"`
	Tier           *ExperimentTier           `json:"tier,omitempty"`
	Treatments     *[]ExperimentTreatment    `json:"treatments,omitempty"`
	Type           *ExperimentType           `json:"type,omitempty"`
	UpdatedAt      *time.Time                `json:"updated_at,omitempty"`
	UpdatedBy      *string                   `json:"updated_by,omitempty"`
	Version        *int64                    `json:"version,omitempty"`
}

// ExperimentField defines model for ExperimentField.
type ExperimentField string

// ExperimentHistory defines model for ExperimentHistory.
type ExperimentHistory struct {
	CreatedAt    time.Time             `json:"created_at"`
	Description  *string               `json:"description"`
	EndTime      time.Time             `json:"end_time"`
	ExperimentId int64                 `json:"experiment_id"`
	Id           int64                 `json:"id"`
	Interval     *int32                `json:"interval"`
	Name         string                `json:"name"`
	Segment      ExperimentSegment     `json:"segment"`
	StartTime    time.Time             `json:"start_time"`
	Status       ExperimentStatus      `json:"status"`
	Tier         ExperimentTier        `json:"tier"`
	Treatments   []ExperimentTreatment `json:"treatments"`
	Type         ExperimentType        `json:"type"`
	UpdatedAt    time.Time             `json:"updated_at"`
	UpdatedBy    string                `json:"updated_by"`
	Version      int64                 `json:"version"`
}

// ExperimentSegment defines model for ExperimentSegment.
type ExperimentSegment map[string]interface{}

// ExperimentStatus defines model for ExperimentStatus.
type ExperimentStatus string

// The user-friendly classification of experiment statuses. The categories are
// self-explanatory. Note that the current time plays a role in the definition
// of some of these statuses.
type ExperimentStatusFriendly string

// ExperimentTier defines model for ExperimentTier.
type ExperimentTier string

// ExperimentTreatment defines model for ExperimentTreatment.
type ExperimentTreatment struct {

	// Configuration associated with the given treatment
	Configuration map[string]interface{} `json:"configuration"`

	// Name of the treatment
	Name string `json:"name"`

	// When the experiment is matched, the % traffic to be directed to the treatment.
	// Optional for Switchback Experiments.
	Traffic *int32 `json:"traffic,omitempty"`
}

// ExperimentType defines model for ExperimentType.
type ExperimentType string

// NewRelicConfig defines model for NewRelicConfig.
type NewRelicConfig struct {

	// App name of the New Relic app
	AppName *string `json:"app_name,omitempty"`

	// Boolean indicating if New Relic is enabled
	Enabled *bool `json:"enabled,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {

	// Number of the current page
	Page int32 `json:"page"`

	// Total number of pages
	Pages int32 `json:"pages"`

	// Total number of results matching the query criteria
	Total int32 `json:"total"`
}

// PreRequisite defines model for PreRequisite.
type PreRequisite struct {
	SegmenterName   string            `json:"segmenter_name"`
	SegmenterValues []SegmenterValues `json:"segmenter_values"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt        time.Time `json:"created_at"`
	Id               int64     `json:"id"`
	RandomizationKey string    `json:"randomization_key"`
	Segmenters       []string  `json:"segmenters"`
	UpdatedAt        time.Time `json:"updated_at"`
	Username         string    `json:"username"`
}

// ProjectSegmenters defines model for ProjectSegmenters.
type ProjectSegmenters struct {

	// List of segmenters name within Project, in priority order.
	Names []string `json:"names"`

	// Mapping of segmenter to the configured experiment variables
	Variables ProjectSegmenters_Variables `json:"variables"`
}

// Mapping of segmenter to the configured experiment variables
type ProjectSegmenters_Variables struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// ProjectSettings defines model for ProjectSettings.
type ProjectSettings struct {
	CreatedAt            time.Time         `json:"created_at"`
	EnableS2idClustering bool              `json:"enable_s2id_clustering"`
	Passkey              string            `json:"passkey"`
	ProjectId            int64             `json:"project_id"`
	RandomizationKey     string            `json:"randomization_key"`
	Segmenters           ProjectSegmenters `json:"segmenters"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *TreatmentSchema `json:"treatment_schema,omitempty"`
	UpdatedAt       time.Time        `json:"updated_at"`
	Username        string           `json:"username"`
	ValidationUrl   *string          `json:"validation_url,omitempty"`
}

// PubSub defines model for PubSub.
type PubSub struct {

	// Project name of the PubSub subscription
	Project *string `json:"project,omitempty"`

	// Topic name of the PubSub subscription
	TopicName *string `json:"topic_name,omitempty"`
}

// A rule that forms part of a definition of a valid treatment schema
type Rule struct {
	Name string `json:"name"`

	// A Go template expression that must return a boolean value
	Predicate string `json:"predicate"`
}

// List of rules that define a valid treatment schema
type Rules []Rule

// S2Ids defines model for S2Ids.
type S2Ids struct {

	// Max S2 cell level
	MaxS2CellLevel *int `json:"max_s2_cell_level,omitempty"`

	// Min S2 cell level
	MinS2CellLevel *int `json:"min_s2_cell_level,omitempty"`
}

// Segment defines model for Segment.
type Segment struct {
	CreatedAt *time.Time         `json:"created_at,omitempty"`
	Id        *int64             `json:"id,omitempty"`
	Name      *string            `json:"name,omitempty"`
	ProjectId *int64             `json:"project_id,omitempty"`
	Segment   *ExperimentSegment `json:"segment,omitempty"`
	UpdatedAt *time.Time         `json:"updated_at,omitempty"`
	UpdatedBy *string            `json:"updated_by,omitempty"`
}

// SegmentField defines model for SegmentField.
type SegmentField string

// SegmentHistory defines model for SegmentHistory.
type SegmentHistory struct {
	CreatedAt time.Time         `json:"created_at"`
	Id        int64             `json:"id"`
	Name      string            `json:"name"`
	Segment   ExperimentSegment `json:"segment"`
	SegmentId int64             `json:"segment_id"`
	UpdatedAt time.Time         `json:"updated_at"`
	UpdatedBy string            `json:"updated_by"`
	Version   int64             `json:"version"`
}

// Segmenter defines model for Segmenter.
type Segmenter struct {
	Constraints []Constraint     `json:"constraints"`
	CreatedAt   *time.Time       `json:"created_at,omitempty"`
	Description *string          `json:"description,omitempty"`
	MultiValued bool             `json:"multi_valued"`
	Name        string           `json:"name"`
	Options     SegmenterOptions `json:"options"`
	Required    bool             `json:"required"`
	Scope       *SegmenterScope  `json:"scope,omitempty"`
	Status      *SegmenterStatus `json:"status,omitempty"`

	// List of varying combination of variables in which this segmenter is can be derived from
	TreatmentRequestFields [][]string    `json:"treatment_request_fields"`
	Type                   SegmenterType `json:"type"`
	UpdatedAt              *time.Time    `json:"updated_at,omitempty"`
}

// SegmenterConfig defines model for SegmenterConfig.
type SegmenterConfig struct {
	S2Ids *S2Ids `json:"s2_ids,omitempty"`
}

// SegmenterOptions defines model for SegmenterOptions.
type SegmenterOptions struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SegmenterScope defines model for SegmenterScope.
type SegmenterScope string

// SegmenterStatus defines model for SegmenterStatus.
type SegmenterStatus string

// SegmenterType defines model for SegmenterType.
type SegmenterType string

// SegmenterValues defines model for SegmenterValues.
type SegmenterValues interface{}

// SelectedTreatment defines model for SelectedTreatment.
type SelectedTreatment struct {
	ExperimentId   int64                     `json:"experiment_id"`
	ExperimentName string                    `json:"experiment_name"`
	Metadata       SelectedTreatmentMetadata `json:"metadata"`
	Treatment      SelectedTreatmentData     `json:"treatment"`
}

// SelectedTreatmentData defines model for SelectedTreatmentData.
type SelectedTreatmentData struct {

	// Custom configuration associated with the given treatment
	Configuration map[string]interface{} `json:"configuration"`
	Id            *int64                 `json:"id,omitempty"`

	// Name of the treatment
	Name string `json:"name"`

	// When the experiment is matched, the % traffic to be directed to the treatment.
	// Optional for Switchback Experiments.
	Traffic *int32 `json:"traffic,omitempty"`
}

// SelectedTreatmentMetadata defines model for SelectedTreatmentMetadata.
type SelectedTreatmentMetadata struct {
	ExperimentType    ExperimentType `json:"experiment_type"`
	ExperimentVersion int64          `json:"experiment_version"`

	// The window id since the beginning of the current version of the Switchback experiment.
	// This field will only be set for Switchback experiments and the window id starts at 0.
	SwitchbackWindowId *int64 `json:"switchback_window_id,omitempty"`
}

// SentryConfig defines model for SentryConfig.
type SentryConfig struct {

	// Boolean indicating if Sentry is enabled
	Enabled *bool                   `json:"enabled,omitempty"`
	Labels  *map[string]interface{} `json:"labels,omitempty"`
}

// Treatment defines model for Treatment.
type Treatment struct {
	Configuration *map[string]interface{} `json:"configuration,omitempty"`
	CreatedAt     *time.Time              `json:"created_at,omitempty"`
	Id            *int64                  `json:"id,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	ProjectId     *int64                  `json:"project_id,omitempty"`
	UpdatedAt     *time.Time              `json:"updated_at,omitempty"`
	UpdatedBy     *string                 `json:"updated_by,omitempty"`
}

// TreatmentField defines model for TreatmentField.
type TreatmentField string

// TreatmentHistory defines model for TreatmentHistory.
type TreatmentHistory struct {
	Configuration map[string]interface{} `json:"configuration"`
	CreatedAt     time.Time              `json:"created_at"`
	Id            int64                  `json:"id"`
	Name          string                 `json:"name"`
	TreatmentId   int64                  `json:"treatment_id"`
	UpdatedAt     time.Time              `json:"updated_at"`
	UpdatedBy     string                 `json:"updated_by"`
	Version       int64                  `json:"version"`
}

// Object containing information to define a valid treatment schema
type TreatmentSchema struct {

	// List of rules that define a valid treatment schema
	Rules Rules `json:"rules"`
}

// TreatmentServiceConfig defines model for TreatmentServiceConfig.
type TreatmentServiceConfig struct {
	NewRelicConfig  *NewRelicConfig  `json:"new_relic_config,omitempty"`
	PubSub          *PubSub          `json:"pub_sub,omitempty"`
	SegmenterConfig *SegmenterConfig `json:"segmenter_config,omitempty"`
	SentryConfig    *SentryConfig    `json:"sentry_config,omitempty"`
}

// Getter for additional properties for ProjectSegmenters_Variables. Returns the specified
// element and whether it was found
func (a ProjectSegmenters_Variables) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectSegmenters_Variables
func (a *ProjectSegmenters_Variables) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectSegmenters_Variables to handle AdditionalProperties
func (a *ProjectSegmenters_Variables) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectSegmenters_Variables to handle AdditionalProperties
func (a ProjectSegmenters_Variables) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SegmenterOptions. Returns the specified
// element and whether it was found
func (a SegmenterOptions) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SegmenterOptions
func (a *SegmenterOptions) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SegmenterOptions to handle AdditionalProperties
func (a *SegmenterOptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SegmenterOptions to handle AdditionalProperties
func (a SegmenterOptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WSVuYWh22r85/T8AAP//DYlTE2EqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
