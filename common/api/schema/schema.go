// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ExperimentStatus.
const (
	ExperimentStatusActive ExperimentStatus = "active"

	ExperimentStatusInactive ExperimentStatus = "inactive"
)

// Defines values for ExperimentTier.
const (
	ExperimentTierDefault ExperimentTier = "default"

	ExperimentTierOverride ExperimentTier = "override"
)

// Defines values for ExperimentType.
const (
	ExperimentTypeAB ExperimentType = "A/B"

	ExperimentTypeSwitchback ExperimentType = "Switchback"
)

// Defines values for SegmentField.
const (
	SegmentFieldId SegmentField = "id"

	SegmentFieldName SegmentField = "name"
)

// Defines values for SegmenterScope.
const (
	SegmenterScopeGlobal SegmenterScope = "global"

	SegmenterScopeProject SegmenterScope = "project"
)

// Defines values for SegmenterStatus.
const (
	SegmenterStatusActive SegmenterStatus = "active"

	SegmenterStatusInactive SegmenterStatus = "inactive"
)

// Defines values for SegmenterType.
const (
	SegmenterTypeBool SegmenterType = "bool"

	SegmenterTypeInteger SegmenterType = "integer"

	SegmenterTypeReal SegmenterType = "real"

	SegmenterTypeString SegmenterType = "string"
)

// Defines values for TreatmentField.
const (
	TreatmentFieldId TreatmentField = "id"

	TreatmentFieldName TreatmentField = "name"
)

// Constraint defines model for Constraint.
type Constraint struct {
	AllowedValues []SegmenterValues `json:"allowed_values"`
	Options       *SegmenterOptions `json:"options,omitempty"`
	PreRequisites []PreRequisite    `json:"pre_requisites"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Error   string `json:"error"`
	Message string `json:"message"`
}

// Experiment defines model for Experiment.
type Experiment struct {
	CreatedAt   time.Time             `json:"created_at"`
	Description *string               `json:"description"`
	EndTime     time.Time             `json:"end_time"`
	Id          int64                 `json:"id"`
	Interval    *int32                `json:"interval"`
	Name        string                `json:"name"`
	ProjectId   int64                 `json:"project_id"`
	Segment     ExperimentSegment     `json:"segment"`
	StartTime   time.Time             `json:"start_time"`
	Status      ExperimentStatus      `json:"status"`
	Tier        ExperimentTier        `json:"tier"`
	Treatments  []ExperimentTreatment `json:"treatments"`
	Type        ExperimentType        `json:"type"`
	UpdatedAt   time.Time             `json:"updated_at"`
	UpdatedBy   string                `json:"updated_by"`
	Version     int64                 `json:"version"`
}

// ExperimentHistory defines model for ExperimentHistory.
type ExperimentHistory struct {
	CreatedAt    time.Time             `json:"created_at"`
	Description  *string               `json:"description"`
	EndTime      time.Time             `json:"end_time"`
	ExperimentId int64                 `json:"experiment_id"`
	Id           int64                 `json:"id"`
	Interval     *int32                `json:"interval"`
	Name         string                `json:"name"`
	Segment      ExperimentSegment     `json:"segment"`
	StartTime    time.Time             `json:"start_time"`
	Status       ExperimentStatus      `json:"status"`
	Tier         ExperimentTier        `json:"tier"`
	Treatments   []ExperimentTreatment `json:"treatments"`
	Type         ExperimentType        `json:"type"`
	UpdatedAt    time.Time             `json:"updated_at"`
	UpdatedBy    string                `json:"updated_by"`
	Version      int64                 `json:"version"`
}

// ExperimentSegment defines model for ExperimentSegment.
type ExperimentSegment map[string]interface{}

// ExperimentStatus defines model for ExperimentStatus.
type ExperimentStatus string

// ExperimentTier defines model for ExperimentTier.
type ExperimentTier string

// ExperimentTreatment defines model for ExperimentTreatment.
type ExperimentTreatment struct {

	// Configuration associated with the given treatment
	Configuration map[string]interface{} `json:"configuration"`

	// Name of the treatment
	Name string `json:"name"`

	// When the experiment is matched, the % traffic to be directed to the treatment.
	// Optional for Switchback Experiments.
	Traffic *int32 `json:"traffic,omitempty"`
}

// ExperimentType defines model for ExperimentType.
type ExperimentType string

// Paging defines model for Paging.
type Paging struct {

	// Number of the current page
	Page int32 `json:"page"`

	// Total number of pages
	Pages int32 `json:"pages"`

	// Total number of results matching the query criteria
	Total int32 `json:"total"`
}

// PreRequisite defines model for PreRequisite.
type PreRequisite struct {
	SegmenterName   string            `json:"segmenter_name"`
	SegmenterValues []SegmenterValues `json:"segmenter_values"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt        time.Time `json:"created_at"`
	Id               int64     `json:"id"`
	RandomizationKey string    `json:"randomization_key"`
	Segmenters       []string  `json:"segmenters"`
	UpdatedAt        time.Time `json:"updated_at"`
	Username         string    `json:"username"`
}

// ProjectSegmenters defines model for ProjectSegmenters.
type ProjectSegmenters struct {

	// List of segmenters name within Project, in priority order.
	Names []string `json:"names"`

	// Mapping of segmenter to the configured experiment variables
	Variables ProjectSegmenters_Variables `json:"variables"`
}

// Mapping of segmenter to the configured experiment variables
type ProjectSegmenters_Variables struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// ProjectSettings defines model for ProjectSettings.
type ProjectSettings struct {
	CreatedAt            time.Time         `json:"created_at"`
	EnableS2idClustering bool              `json:"enable_s2id_clustering"`
	Passkey              string            `json:"passkey"`
	ProjectId            int64             `json:"project_id"`
	RandomizationKey     string            `json:"randomization_key"`
	Segmenters           ProjectSegmenters `json:"segmenters"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *TreatmentSchema `json:"treatment_schema,omitempty"`
	UpdatedAt       time.Time        `json:"updated_at"`
	Username        string           `json:"username"`
	ValidationUrl   *string          `json:"validation_url,omitempty"`
}

// A rule that forms part of a definition of a valid treatment schema
type Rule struct {
	Name string `json:"name"`

	// A Go template expression that must return a boolean value
	Predicate string `json:"predicate"`
}

// List of rules that define a valid treatment schema
type Rules []Rule

// Segment defines model for Segment.
type Segment struct {
	CreatedAt *time.Time         `json:"created_at,omitempty"`
	Id        *int64             `json:"id,omitempty"`
	Name      *string            `json:"name,omitempty"`
	ProjectId *int64             `json:"project_id,omitempty"`
	Segment   *ExperimentSegment `json:"segment,omitempty"`
	UpdatedAt *time.Time         `json:"updated_at,omitempty"`
	UpdatedBy *string            `json:"updated_by,omitempty"`
}

// SegmentField defines model for SegmentField.
type SegmentField string

// SegmentHistory defines model for SegmentHistory.
type SegmentHistory struct {
	CreatedAt time.Time         `json:"created_at"`
	Id        int64             `json:"id"`
	Name      string            `json:"name"`
	Segment   ExperimentSegment `json:"segment"`
	SegmentId int64             `json:"segment_id"`
	UpdatedAt time.Time         `json:"updated_at"`
	UpdatedBy string            `json:"updated_by"`
	Version   int64             `json:"version"`
}

// Segmenter defines model for Segmenter.
type Segmenter struct {
	Constraints []Constraint     `json:"constraints"`
	CreatedAt   *time.Time       `json:"created_at,omitempty"`
	Description *string          `json:"description,omitempty"`
	MultiValued bool             `json:"multi_valued"`
	Name        string           `json:"name"`
	Options     SegmenterOptions `json:"options"`
	Required    bool             `json:"required"`
	Scope       *SegmenterScope  `json:"scope,omitempty"`
	Status      *SegmenterStatus `json:"status,omitempty"`

	// List of varying combination of variables in which this segmenter is can be derived from
	TreatmentRequestFields [][]string    `json:"treatment_request_fields"`
	Type                   SegmenterType `json:"type"`
	UpdatedAt              *time.Time    `json:"updated_at,omitempty"`
}

// SegmenterOptions defines model for SegmenterOptions.
type SegmenterOptions struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SegmenterScope defines model for SegmenterScope.
type SegmenterScope string

// SegmenterStatus defines model for SegmenterStatus.
type SegmenterStatus string

// SegmenterType defines model for SegmenterType.
type SegmenterType string

// SegmenterValues defines model for SegmenterValues.
type SegmenterValues interface{}

// SelectedTreatment defines model for SelectedTreatment.
type SelectedTreatment struct {
	ExperimentId       int64                 `json:"experiment_id"`
	ExperimentName     string                `json:"experiment_name"`
	ExperimentVersion  int64                 `json:"experiment_version"`
	SwitchbackWindowId *int64                `json:"switchback_window_id,omitempty"`
	Treatment          SelectedTreatmentData `json:"treatment"`
}

// SelectedTreatmentData defines model for SelectedTreatmentData.
type SelectedTreatmentData struct {

	// Custom configuration associated with the given treatment
	Configuration map[string]interface{} `json:"configuration"`
	Id            *int64                 `json:"id,omitempty"`

	// Name of the treatment
	Name string `json:"name"`

	// When the experiment is matched, the % traffic to be directed to the treatment.
	// Optional for Switchback Experiments.
	Traffic *int32 `json:"traffic,omitempty"`
}

// Treatment defines model for Treatment.
type Treatment struct {
	Configuration *map[string]interface{} `json:"configuration,omitempty"`
	CreatedAt     *time.Time              `json:"created_at,omitempty"`
	Id            *int64                  `json:"id,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	ProjectId     *int64                  `json:"project_id,omitempty"`
	UpdatedAt     *time.Time              `json:"updated_at,omitempty"`
	UpdatedBy     *string                 `json:"updated_by,omitempty"`
}

// TreatmentField defines model for TreatmentField.
type TreatmentField string

// TreatmentHistory defines model for TreatmentHistory.
type TreatmentHistory struct {
	Configuration map[string]interface{} `json:"configuration"`
	CreatedAt     time.Time              `json:"created_at"`
	Id            int64                  `json:"id"`
	Name          string                 `json:"name"`
	TreatmentId   int64                  `json:"treatment_id"`
	UpdatedAt     time.Time              `json:"updated_at"`
	UpdatedBy     string                 `json:"updated_by"`
	Version       int64                  `json:"version"`
}

// Object containing information to define a valid treatment schema
type TreatmentSchema struct {

	// List of rules that define a valid treatment schema
	Rules Rules `json:"rules"`
}

// Getter for additional properties for ProjectSegmenters_Variables. Returns the specified
// element and whether it was found
func (a ProjectSegmenters_Variables) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectSegmenters_Variables
func (a *ProjectSegmenters_Variables) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectSegmenters_Variables to handle AdditionalProperties
func (a *ProjectSegmenters_Variables) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectSegmenters_Variables to handle AdditionalProperties
func (a ProjectSegmenters_Variables) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SegmenterOptions. Returns the specified
// element and whether it was found
func (a SegmenterOptions) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SegmenterOptions
func (a *SegmenterOptions) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SegmenterOptions to handle AdditionalProperties
func (a *SegmenterOptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SegmenterOptions to handle AdditionalProperties
func (a SegmenterOptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZJFYDErvlHtz+icAAP//h1CfoGcnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
