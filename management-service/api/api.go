// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/caraml-dev/xp/common/api/schema"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BadRequest defines model for BadRequest.
type BadRequest externalRef0.Error

// CreateExperimentSuccess defines model for CreateExperimentSuccess.
type CreateExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// CreateProjectSettingsSuccess defines model for CreateProjectSettingsSuccess.
type CreateProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// CreateSegmentSuccess defines model for CreateSegmentSuccess.
type CreateSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// CreateSegmenterSuccess defines model for CreateSegmenterSuccess.
type CreateSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// CreateTreatmentSuccess defines model for CreateTreatmentSuccess.
type CreateTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// DeleteSegmentSuccess defines model for DeleteSegmentSuccess.
type DeleteSegmentSuccess struct {
	Id *int `json:"id,omitempty"`
}

// DeleteSegmenterSuccess defines model for DeleteSegmenterSuccess.
type DeleteSegmenterSuccess struct {
	Name *string `json:"name,omitempty"`
}

// DeleteTreatmentSuccess defines model for DeleteTreatmentSuccess.
type DeleteTreatmentSuccess struct {
	Id *int `json:"id,omitempty"`
}

// GetExperimentHistorySuccess defines model for GetExperimentHistorySuccess.
type GetExperimentHistorySuccess struct {
	Data externalRef0.ExperimentHistory `json:"data"`
}

// GetExperimentSuccess defines model for GetExperimentSuccess.
type GetExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// GetProjectExperimentVariablesSuccess defines model for GetProjectExperimentVariablesSuccess.
type GetProjectExperimentVariablesSuccess struct {
	Data []string `json:"data"`
}

// GetProjectSettingsSuccess defines model for GetProjectSettingsSuccess.
type GetProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// GetSegmentHistorySuccess defines model for GetSegmentHistorySuccess.
type GetSegmentHistorySuccess struct {
	Data externalRef0.SegmentHistory `json:"data"`
}

// GetSegmentSuccess defines model for GetSegmentSuccess.
type GetSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// GetSegmenterSuccess defines model for GetSegmenterSuccess.
type GetSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// GetTreatmentHistorySuccess defines model for GetTreatmentHistorySuccess.
type GetTreatmentHistorySuccess struct {
	Data externalRef0.TreatmentHistory `json:"data"`
}

// GetTreatmentSuccess defines model for GetTreatmentSuccess.
type GetTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError externalRef0.Error

// ListExperimentHistorySuccess defines model for ListExperimentHistorySuccess.
type ListExperimentHistorySuccess struct {
	Data   []externalRef0.ExperimentHistory `json:"data"`
	Paging *externalRef0.Paging             `json:"paging,omitempty"`
}

// ListExperimentsSuccess defines model for ListExperimentsSuccess.
type ListExperimentsSuccess struct {
	Data   []externalRef0.Experiment `json:"data"`
	Paging *externalRef0.Paging      `json:"paging,omitempty"`
}

// ListProjectsSuccess defines model for ListProjectsSuccess.
type ListProjectsSuccess struct {
	Data []externalRef0.Project `json:"data"`
}

// ListSegmentHistorySuccess defines model for ListSegmentHistorySuccess.
type ListSegmentHistorySuccess struct {
	Data   []externalRef0.SegmentHistory `json:"data"`
	Paging *externalRef0.Paging          `json:"paging,omitempty"`
}

// ListSegmentersSuccess defines model for ListSegmentersSuccess.
type ListSegmentersSuccess struct {
	Data []externalRef0.Segmenter `json:"data"`
}

// ListSegmentsSuccess defines model for ListSegmentsSuccess.
type ListSegmentsSuccess struct {
	Data   []externalRef0.Segment `json:"data"`
	Paging *externalRef0.Paging   `json:"paging,omitempty"`
}

// ListTreatmentHistorySuccess defines model for ListTreatmentHistorySuccess.
type ListTreatmentHistorySuccess struct {
	Data   []externalRef0.TreatmentHistory `json:"data"`
	Paging *externalRef0.Paging            `json:"paging,omitempty"`
}

// ListTreatmentsSuccess defines model for ListTreatmentsSuccess.
type ListTreatmentsSuccess struct {
	Data   []externalRef0.Treatment `json:"data"`
	Paging *externalRef0.Paging     `json:"paging,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound externalRef0.Error

// UpdateExperimentSuccess defines model for UpdateExperimentSuccess.
type UpdateExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// UpdateProjectSettingsSuccess defines model for UpdateProjectSettingsSuccess.
type UpdateProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// UpdateSegmentSuccess defines model for UpdateSegmentSuccess.
type UpdateSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// UpdateSegmenterSuccess defines model for UpdateSegmenterSuccess.
type UpdateSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// UpdateTreatmentSuccess defines model for UpdateTreatmentSuccess.
type UpdateTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// CreateExperimentRequestBody defines model for CreateExperimentRequestBody.
type CreateExperimentRequestBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Name        string                             `json:"name"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// CreateProjectSettingsRequestBody defines model for CreateProjectSettingsRequestBody.
type CreateProjectSettingsRequestBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// CreateSegmentRequestBody defines model for CreateSegmentRequestBody.
type CreateSegmentRequestBody struct {
	Name      string                         `json:"name"`
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// CreateSegmenterRequestBody defines model for CreateSegmenterRequestBody.
type CreateSegmenterRequestBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Name        string                         `json:"name"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
	Type        externalRef0.SegmenterType     `json:"type"`
}

// CreateTreatmentRequestBody defines model for CreateTreatmentRequestBody.
type CreateTreatmentRequestBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	Name          string                 `json:"name"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// UpdateExperimentRequestBody defines model for UpdateExperimentRequestBody.
type UpdateExperimentRequestBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// UpdateProjectSettingsRequestBody defines model for UpdateProjectSettingsRequestBody.
type UpdateProjectSettingsRequestBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// UpdateSegmentRequestBody defines model for UpdateSegmentRequestBody.
type UpdateSegmentRequestBody struct {
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// UpdateSegmenterRequestBody defines model for UpdateSegmenterRequestBody.
type UpdateSegmenterRequestBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
}

// UpdateTreatmentRequestBody defines model for UpdateTreatmentRequestBody.
type UpdateTreatmentRequestBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// ValidateEntityRequestBody defines model for ValidateEntityRequestBody.
type ValidateEntityRequestBody struct {
	Data map[string]interface{} `json:"data"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// ListExperimentsParams defines parameters for ListExperiments.
type ListExperimentsParams struct {
	Status *externalRef0.ExperimentStatus `json:"status,omitempty"`

	// status_friendly is a combination of the status field, in conjunction with the duration,
	// that produces a user-friendly classification of the experiment statuses. When this parameter
	// is supplied, the status, start_time and end_time filters can also be set. However, the final
	// result would be an intersection of the application of each of these filters.
	StatusFriendly *[]externalRef0.ExperimentStatusFriendly `json:"status_friendly,omitempty"`

	// Used together with the start_time, to filter experiments that are at least partially running in the input range.
	EndTime   *time.Time                   `json:"end_time,omitempty"`
	Tier      *externalRef0.ExperimentTier `json:"tier,omitempty"`
	Type      *externalRef0.ExperimentType `json:"type,omitempty"`
	Name      *string                      `json:"name,omitempty"`
	UpdatedBy *string                      `json:"updated_by,omitempty"`

	// Search experiment name and description for a partial match of the search text
	Search *string `json:"search,omitempty"`

	// Result page number. It defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. It defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`

	// Used together with the end_time, to filter experiments that are at least partially running in the input range.
	StartTime *time.Time              `json:"start_time,omitempty"`
	Segment   *map[string]interface{} `json:"segment,omitempty"`

	// controls whether or not weak segmenter matches (experiments where the segmenter is optional) should be returned
	IncludeWeakMatch *bool `json:"include_weak_match,omitempty"`

	// A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.ExperimentField `json:"fields,omitempty"`
}

// ListExperimentHistoryParams defines parameters for ListExperimentHistory.
type ListExperimentHistoryParams struct {

	// Result page number. It defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. It defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`
}

// ListSegmentersParams defines parameters for ListSegmenters.
type ListSegmentersParams struct {
	Scope  *externalRef0.SegmenterScope  `json:"scope,omitempty"`
	Status *externalRef0.SegmenterStatus `json:"status,omitempty"`

	// Search treatment name for a partial match of the search text
	Search *string `json:"search,omitempty"`
}

// ListSegmentsParams defines parameters for ListSegments.
type ListSegmentsParams struct {
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Search segment name for a partial match of the search text
	Search *string `json:"search,omitempty"`

	// Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`

	// A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.SegmentField `json:"fields,omitempty"`
}

// ListSegmentHistoryParams defines parameters for ListSegmentHistory.
type ListSegmentHistoryParams struct {

	// Result page number. It defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. It defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`
}

// ListTreatmentsParams defines parameters for ListTreatments.
type ListTreatmentsParams struct {
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Search treatment name for a partial match of the search text
	Search *string `json:"search,omitempty"`

	// Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`

	// A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.TreatmentField `json:"fields,omitempty"`
}

// ListTreatmentHistoryParams defines parameters for ListTreatmentHistory.
type ListTreatmentHistoryParams struct {

	// Result page number. If empty, it defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. If empty, it defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`
}

// CreateExperimentJSONRequestBody defines body for CreateExperiment for application/json ContentType.
type CreateExperimentJSONRequestBody CreateExperimentRequestBody

// UpdateExperimentJSONRequestBody defines body for UpdateExperiment for application/json ContentType.
type UpdateExperimentJSONRequestBody UpdateExperimentRequestBody

// CreateSegmenterJSONRequestBody defines body for CreateSegmenter for application/json ContentType.
type CreateSegmenterJSONRequestBody CreateSegmenterRequestBody

// UpdateSegmenterJSONRequestBody defines body for UpdateSegmenter for application/json ContentType.
type UpdateSegmenterJSONRequestBody UpdateSegmenterRequestBody

// CreateSegmentJSONRequestBody defines body for CreateSegment for application/json ContentType.
type CreateSegmentJSONRequestBody CreateSegmentRequestBody

// UpdateSegmentJSONRequestBody defines body for UpdateSegment for application/json ContentType.
type UpdateSegmentJSONRequestBody UpdateSegmentRequestBody

// CreateProjectSettingsJSONRequestBody defines body for CreateProjectSettings for application/json ContentType.
type CreateProjectSettingsJSONRequestBody CreateProjectSettingsRequestBody

// UpdateProjectSettingsJSONRequestBody defines body for UpdateProjectSettings for application/json ContentType.
type UpdateProjectSettingsJSONRequestBody UpdateProjectSettingsRequestBody

// CreateTreatmentJSONRequestBody defines body for CreateTreatment for application/json ContentType.
type CreateTreatmentJSONRequestBody CreateTreatmentRequestBody

// UpdateTreatmentJSONRequestBody defines body for UpdateTreatment for application/json ContentType.
type UpdateTreatmentJSONRequestBody UpdateTreatmentRequestBody

// ValidateEntityJSONRequestBody defines body for ValidateEntity for application/json ContentType.
type ValidateEntityJSONRequestBody ValidateEntityRequestBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List info of all projects set up for Experimentation
	// (GET /projects)
	ListProjects(w http.ResponseWriter, r *http.Request)
	// Get all parameters required for generating treatments for the given project
	// (GET /projects/{project_id}/experiment-variables)
	GetProjectExperimentVariables(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get experiments for a project w.r.t. query params
	// (GET /projects/{project_id}/experiments)
	ListExperiments(w http.ResponseWriter, r *http.Request, projectId int64, params ListExperimentsParams)
	// Create a new experiment for a project
	// (POST /projects/{project_id}/experiments)
	CreateExperiment(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get details of an experiment with the given experiment_id and project_id
	// (GET /projects/{project_id}/experiments/{experiment_id})
	GetExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// Update an experiment with the given experiment_id and project_id
	// (PUT /projects/{project_id}/experiments/{experiment_id})
	UpdateExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// Disable an experiment with the given experiment_id and project_id
	// (PUT /projects/{project_id}/experiments/{experiment_id}/disable)
	DisableExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// Enable an experiment with the given experiment_id and project_id
	// (PUT /projects/{project_id}/experiments/{experiment_id}/enable)
	EnableExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// List an experiment's historical versions
	// (GET /projects/{project_id}/experiments/{experiment_id}/history)
	ListExperimentHistory(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64, params ListExperimentHistoryParams)
	// List an experiment's historical versions
	// (GET /projects/{project_id}/experiments/{experiment_id}/history/{version})
	GetExperimentHistory(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64, version int64)
	// Get all segmenter configurations required for generating experiments for the given project
	// (GET /projects/{project_id}/segmenters)
	ListSegmenters(w http.ResponseWriter, r *http.Request, projectId int64, params ListSegmentersParams)
	// Create a new project-specific segmenter
	// (POST /projects/{project_id}/segmenters)
	CreateSegmenter(w http.ResponseWriter, r *http.Request, projectId int64)
	// Delete a project-specific segmenter
	// (DELETE /projects/{project_id}/segmenters/{name})
	DeleteSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string)
	// Get the global/project-specific segmenter by name
	// (GET /projects/{project_id}/segmenters/{name})
	GetSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string)
	// Update an existing project-specific segmenter
	// (PUT /projects/{project_id}/segmenters/{name})
	UpdateSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string)
	// Get segments for a project w.r.t query params
	// (GET /projects/{project_id}/segments)
	ListSegments(w http.ResponseWriter, r *http.Request, projectId int64, params ListSegmentsParams)
	// Create a new segment for a project
	// (POST /projects/{project_id}/segments)
	CreateSegment(w http.ResponseWriter, r *http.Request, projectId int64)
	// Delete a segment with the given segment_id and project_id
	// (DELETE /projects/{project_id}/segments/{segment_id})
	DeleteSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64)
	// Get details of a segment with the given segment_id and project_id
	// (GET /projects/{project_id}/segments/{segment_id})
	GetSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64)
	// Update a segment with the given segment_id and project_id
	// (PUT /projects/{project_id}/segments/{segment_id})
	UpdateSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64)
	// List a segment's historical versions
	// (GET /projects/{project_id}/segments/{segment_id}/history)
	ListSegmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64, params ListSegmentHistoryParams)
	// Get a segment's historical version
	// (GET /projects/{project_id}/segments/{segment_id}/history/{version})
	GetSegmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64, version int64)
	// Get the settings for the given project
	// (GET /projects/{project_id}/settings)
	GetProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64)
	// Set up new project for Experimentation
	// (POST /projects/{project_id}/settings)
	CreateProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64)
	// Update the settings for the given project
	// (PUT /projects/{project_id}/settings)
	UpdateProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get treatments for a project w.r.t query params
	// (GET /projects/{project_id}/treatments)
	ListTreatments(w http.ResponseWriter, r *http.Request, projectId int64, params ListTreatmentsParams)
	// Create a new treatment for a project
	// (POST /projects/{project_id}/treatments)
	CreateTreatment(w http.ResponseWriter, r *http.Request, projectId int64)
	// Delete a treatment with the given treatment_id and project_id
	// (DELETE /projects/{project_id}/treatments/{treatment_id})
	DeleteTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64)
	// Get details of a treatment with the given treatment_id and project_id
	// (GET /projects/{project_id}/treatments/{treatment_id})
	GetTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64)
	// Update a treatment with the given treatment_id and project_id
	// (PUT /projects/{project_id}/treatments/{treatment_id})
	UpdateTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64)
	// List a treatment's historical versions
	// (GET /projects/{project_id}/treatments/{treatment_id}/history)
	ListTreatmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64, params ListTreatmentHistoryParams)
	// List a treatment's historical versions
	// (GET /projects/{project_id}/treatments/{treatment_id}/history/{version})
	GetTreatmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64, version int64)
	// validates an entity against a given treatment schema or validation url
	// (POST /validate)
	ValidateEntity(w http.ResponseWriter, r *http.Request)
}

// Copied from https://github.com/deepmap/oapi-codegen/blob/v1.8.1/pkg/codegen/templates/chi-middleware.tmpl
// Motivation behind customizing the template is for capturing segmenter values via query parameters for
// ListExperiments (GET method)

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjects(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProjectExperimentVariables operation middleware
func (siw *ServerInterfaceWrapper) GetProjectExperimentVariables(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectExperimentVariables(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListExperiments operation middleware
func (siw *ServerInterfaceWrapper) ListExperiments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExperimentsParams
	paramsSet := map[string]bool{}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {
		paramsSet["status"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter status: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status_friendly" -------------
	if paramValue := r.URL.Query().Get("status_friendly"); paramValue != "" {
		paramsSet["status_friendly"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "status_friendly", r.URL.Query(), &params.StatusFriendly)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter status_friendly: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------
	if paramValue := r.URL.Query().Get("end_time"); paramValue != "" {
		paramsSet["end_time"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "end_time", r.URL.Query(), &params.EndTime)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter end_time: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tier" -------------
	if paramValue := r.URL.Query().Get("tier"); paramValue != "" {
		paramsSet["tier"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "tier", r.URL.Query(), &params.Tier)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tier: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := r.URL.Query().Get("type"); paramValue != "" {
		paramsSet["type"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter type: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {
		paramsSet["name"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "updated_by" -------------
	if paramValue := r.URL.Query().Get("updated_by"); paramValue != "" {
		paramsSet["updated_by"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "updated_by", r.URL.Query(), &params.UpdatedBy)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter updated_by: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := r.URL.Query().Get("search"); paramValue != "" {
		paramsSet["search"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter search: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {
		paramsSet["page"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {
		paramsSet["page_size"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page_size: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------
	if paramValue := r.URL.Query().Get("start_time"); paramValue != "" {
		paramsSet["start_time"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "start_time", r.URL.Query(), &params.StartTime)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter start_time: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "segment" -------------
	if paramValue := r.URL.Query().Get("segment"); paramValue != "" {
		paramsSet["segment"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "segment", r.URL.Query(), &params.Segment)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "include_weak_match" -------------
	if paramValue := r.URL.Query().Get("include_weak_match"); paramValue != "" {
		paramsSet["include_weak_match"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "include_weak_match", r.URL.Query(), &params.IncludeWeakMatch)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter include_weak_match: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------
	if paramValue := r.URL.Query().Get("fields"); paramValue != "" {
		paramsSet["fields"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter fields: %s", err), http.StatusBadRequest)
		return
	}

	allSegmenters := map[string]interface{}{}
	for k, v := range r.URL.Query() {
		if _, contains := paramsSet[k]; !contains {
			allSegmenters[k] = v
		}
	}
	params.Segment = &allSegmenters

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExperiments(w, r, projectId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateExperiment operation middleware
func (siw *ServerInterfaceWrapper) CreateExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateExperiment(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetExperiment operation middleware
func (siw *ServerInterfaceWrapper) GetExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameter("simple", false, "experiment_id", chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter experiment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExperiment(w, r, projectId, experimentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateExperiment operation middleware
func (siw *ServerInterfaceWrapper) UpdateExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameter("simple", false, "experiment_id", chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter experiment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateExperiment(w, r, projectId, experimentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DisableExperiment operation middleware
func (siw *ServerInterfaceWrapper) DisableExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameter("simple", false, "experiment_id", chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter experiment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DisableExperiment(w, r, projectId, experimentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// EnableExperiment operation middleware
func (siw *ServerInterfaceWrapper) EnableExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameter("simple", false, "experiment_id", chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter experiment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EnableExperiment(w, r, projectId, experimentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListExperimentHistory operation middleware
func (siw *ServerInterfaceWrapper) ListExperimentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameter("simple", false, "experiment_id", chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter experiment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExperimentHistoryParams
	paramsSet := map[string]bool{}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {
		paramsSet["page"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {
		paramsSet["page_size"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page_size: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExperimentHistory(w, r, projectId, experimentId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetExperimentHistory operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameter("simple", false, "experiment_id", chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter experiment_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version int64

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExperimentHistory(w, r, projectId, experimentId, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListSegmenters operation middleware
func (siw *ServerInterfaceWrapper) ListSegmenters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSegmentersParams
	paramsSet := map[string]bool{}

	// ------------- Optional query parameter "scope" -------------
	if paramValue := r.URL.Query().Get("scope"); paramValue != "" {
		paramsSet["scope"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter scope: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {
		paramsSet["status"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter status: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := r.URL.Query().Get("search"); paramValue != "" {
		paramsSet["search"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter search: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSegmenters(w, r, projectId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateSegmenter operation middleware
func (siw *ServerInterfaceWrapper) CreateSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSegmenter(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteSegmenter operation middleware
func (siw *ServerInterfaceWrapper) DeleteSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSegmenter(w, r, projectId, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSegmenter operation middleware
func (siw *ServerInterfaceWrapper) GetSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegmenter(w, r, projectId, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateSegmenter operation middleware
func (siw *ServerInterfaceWrapper) UpdateSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSegmenter(w, r, projectId, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListSegments operation middleware
func (siw *ServerInterfaceWrapper) ListSegments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSegmentsParams
	paramsSet := map[string]bool{}

	// ------------- Optional query parameter "updated_by" -------------
	if paramValue := r.URL.Query().Get("updated_by"); paramValue != "" {
		paramsSet["updated_by"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "updated_by", r.URL.Query(), &params.UpdatedBy)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter updated_by: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := r.URL.Query().Get("search"); paramValue != "" {
		paramsSet["search"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter search: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {
		paramsSet["page"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {
		paramsSet["page_size"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page_size: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------
	if paramValue := r.URL.Query().Get("fields"); paramValue != "" {
		paramsSet["fields"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter fields: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSegments(w, r, projectId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateSegment operation middleware
func (siw *ServerInterfaceWrapper) CreateSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSegment(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteSegment operation middleware
func (siw *ServerInterfaceWrapper) DeleteSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameter("simple", false, "segment_id", chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSegment(w, r, projectId, segmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSegment operation middleware
func (siw *ServerInterfaceWrapper) GetSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameter("simple", false, "segment_id", chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegment(w, r, projectId, segmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateSegment operation middleware
func (siw *ServerInterfaceWrapper) UpdateSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameter("simple", false, "segment_id", chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSegment(w, r, projectId, segmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListSegmentHistory operation middleware
func (siw *ServerInterfaceWrapper) ListSegmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameter("simple", false, "segment_id", chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSegmentHistoryParams
	paramsSet := map[string]bool{}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {
		paramsSet["page"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {
		paramsSet["page_size"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page_size: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSegmentHistory(w, r, projectId, segmentId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSegmentHistory operation middleware
func (siw *ServerInterfaceWrapper) GetSegmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameter("simple", false, "segment_id", chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version int64

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegmentHistory(w, r, projectId, segmentId, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProjectSettings operation middleware
func (siw *ServerInterfaceWrapper) GetProjectSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectSettings(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateProjectSettings operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectSettings(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateProjectSettings operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectSettings(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListTreatments operation middleware
func (siw *ServerInterfaceWrapper) ListTreatments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTreatmentsParams
	paramsSet := map[string]bool{}

	// ------------- Optional query parameter "updated_by" -------------
	if paramValue := r.URL.Query().Get("updated_by"); paramValue != "" {
		paramsSet["updated_by"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "updated_by", r.URL.Query(), &params.UpdatedBy)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter updated_by: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := r.URL.Query().Get("search"); paramValue != "" {
		paramsSet["search"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter search: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {
		paramsSet["page"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {
		paramsSet["page_size"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page_size: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------
	if paramValue := r.URL.Query().Get("fields"); paramValue != "" {
		paramsSet["fields"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter fields: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTreatments(w, r, projectId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTreatment operation middleware
func (siw *ServerInterfaceWrapper) CreateTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTreatment(w, r, projectId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTreatment operation middleware
func (siw *ServerInterfaceWrapper) DeleteTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameter("simple", false, "treatment_id", chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter treatment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTreatment(w, r, projectId, treatmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTreatment operation middleware
func (siw *ServerInterfaceWrapper) GetTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameter("simple", false, "treatment_id", chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter treatment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTreatment(w, r, projectId, treatmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateTreatment operation middleware
func (siw *ServerInterfaceWrapper) UpdateTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameter("simple", false, "treatment_id", chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter treatment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTreatment(w, r, projectId, treatmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListTreatmentHistory operation middleware
func (siw *ServerInterfaceWrapper) ListTreatmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameter("simple", false, "treatment_id", chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter treatment_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTreatmentHistoryParams
	paramsSet := map[string]bool{}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {
		paramsSet["page"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {
		paramsSet["page_size"] = true

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page_size: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTreatmentHistory(w, r, projectId, treatmentId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTreatmentHistory operation middleware
func (siw *ServerInterfaceWrapper) GetTreatmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameter("simple", false, "treatment_id", chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter treatment_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version int64

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTreatmentHistory(w, r, projectId, treatmentId, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ValidateEntity operation middleware
func (siw *ServerInterfaceWrapper) ValidateEntity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateEntity(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.ListProjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiment-variables", wrapper.GetProjectExperimentVariables)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments", wrapper.ListExperiments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/experiments", wrapper.CreateExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}", wrapper.GetExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}", wrapper.UpdateExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/disable", wrapper.DisableExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/enable", wrapper.EnableExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/history", wrapper.ListExperimentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/history/{version}", wrapper.GetExperimentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segmenters", wrapper.ListSegmenters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/segmenters", wrapper.CreateSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/segmenters/{name}", wrapper.DeleteSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segmenters/{name}", wrapper.GetSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/segmenters/{name}", wrapper.UpdateSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments", wrapper.ListSegments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/segments", wrapper.CreateSegment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/segments/{segment_id}", wrapper.DeleteSegment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments/{segment_id}", wrapper.GetSegment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/segments/{segment_id}", wrapper.UpdateSegment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments/{segment_id}/history", wrapper.ListSegmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments/{segment_id}/history/{version}", wrapper.GetSegmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/settings", wrapper.GetProjectSettings)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/settings", wrapper.CreateProjectSettings)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/settings", wrapper.UpdateProjectSettings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments", wrapper.ListTreatments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/treatments", wrapper.CreateTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}", wrapper.DeleteTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}", wrapper.GetTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}", wrapper.UpdateTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}/history", wrapper.ListTreatmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}/history/{version}", wrapper.GetTreatmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/validate", wrapper.ValidateEntity)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
