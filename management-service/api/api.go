// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/caraml-dev/xp/common/api/schema"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BadRequest defines model for BadRequest.
type BadRequest = externalRef0.Error

// CreateExperimentSuccess defines model for CreateExperimentSuccess.
type CreateExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// CreateProjectSettingsSuccess defines model for CreateProjectSettingsSuccess.
type CreateProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// CreateSegmentSuccess defines model for CreateSegmentSuccess.
type CreateSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// CreateSegmenterSuccess defines model for CreateSegmenterSuccess.
type CreateSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// CreateTreatmentSuccess defines model for CreateTreatmentSuccess.
type CreateTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// DeleteSegmentSuccess defines model for DeleteSegmentSuccess.
type DeleteSegmentSuccess struct {
	Id *int `json:"id,omitempty"`
}

// DeleteSegmenterSuccess defines model for DeleteSegmenterSuccess.
type DeleteSegmenterSuccess struct {
	Name *string `json:"name,omitempty"`
}

// DeleteTreatmentSuccess defines model for DeleteTreatmentSuccess.
type DeleteTreatmentSuccess struct {
	Id *int `json:"id,omitempty"`
}

// GetExperimentHistorySuccess defines model for GetExperimentHistorySuccess.
type GetExperimentHistorySuccess struct {
	Data externalRef0.ExperimentHistory `json:"data"`
}

// GetExperimentSuccess defines model for GetExperimentSuccess.
type GetExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// GetProjectExperimentVariablesSuccess defines model for GetProjectExperimentVariablesSuccess.
type GetProjectExperimentVariablesSuccess struct {
	Data []string `json:"data"`
}

// GetProjectSettingsSuccess defines model for GetProjectSettingsSuccess.
type GetProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// GetSegmentHistorySuccess defines model for GetSegmentHistorySuccess.
type GetSegmentHistorySuccess struct {
	Data externalRef0.SegmentHistory `json:"data"`
}

// GetSegmentSuccess defines model for GetSegmentSuccess.
type GetSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// GetSegmenterSuccess defines model for GetSegmenterSuccess.
type GetSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// GetTreatmentHistorySuccess defines model for GetTreatmentHistorySuccess.
type GetTreatmentHistorySuccess struct {
	Data externalRef0.TreatmentHistory `json:"data"`
}

// GetTreatmentServiceConfigSuccess defines model for GetTreatmentServiceConfigSuccess.
type GetTreatmentServiceConfigSuccess struct {
	Data externalRef0.TreatmentServiceConfig `json:"data"`
}

// GetTreatmentSuccess defines model for GetTreatmentSuccess.
type GetTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = externalRef0.Error

// ListExperimentHistorySuccess defines model for ListExperimentHistorySuccess.
type ListExperimentHistorySuccess struct {
	Data   []externalRef0.ExperimentHistory `json:"data"`
	Paging *externalRef0.Paging             `json:"paging,omitempty"`
}

// ListExperimentsSuccess defines model for ListExperimentsSuccess.
type ListExperimentsSuccess struct {
	Data   []externalRef0.Experiment `json:"data"`
	Paging *externalRef0.Paging      `json:"paging,omitempty"`
}

// ListProjectsSuccess defines model for ListProjectsSuccess.
type ListProjectsSuccess struct {
	Data []externalRef0.Project `json:"data"`
}

// ListSegmentHistorySuccess defines model for ListSegmentHistorySuccess.
type ListSegmentHistorySuccess struct {
	Data   []externalRef0.SegmentHistory `json:"data"`
	Paging *externalRef0.Paging          `json:"paging,omitempty"`
}

// ListSegmentersSuccess defines model for ListSegmentersSuccess.
type ListSegmentersSuccess struct {
	Data []externalRef0.Segmenter `json:"data"`
}

// ListSegmentsSuccess defines model for ListSegmentsSuccess.
type ListSegmentsSuccess struct {
	Data   []externalRef0.Segment `json:"data"`
	Paging *externalRef0.Paging   `json:"paging,omitempty"`
}

// ListTreatmentHistorySuccess defines model for ListTreatmentHistorySuccess.
type ListTreatmentHistorySuccess struct {
	Data   []externalRef0.TreatmentHistory `json:"data"`
	Paging *externalRef0.Paging            `json:"paging,omitempty"`
}

// ListTreatmentsSuccess defines model for ListTreatmentsSuccess.
type ListTreatmentsSuccess struct {
	Data   []externalRef0.Treatment `json:"data"`
	Paging *externalRef0.Paging     `json:"paging,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound = externalRef0.Error

// UpdateExperimentSuccess defines model for UpdateExperimentSuccess.
type UpdateExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// UpdateProjectSettingsSuccess defines model for UpdateProjectSettingsSuccess.
type UpdateProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// UpdateSegmentSuccess defines model for UpdateSegmentSuccess.
type UpdateSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// UpdateSegmenterSuccess defines model for UpdateSegmenterSuccess.
type UpdateSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// UpdateTreatmentSuccess defines model for UpdateTreatmentSuccess.
type UpdateTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// CreateExperimentRequestBody defines model for CreateExperimentRequestBody.
type CreateExperimentRequestBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Name        string                             `json:"name"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// CreateProjectSettingsRequestBody defines model for CreateProjectSettingsRequestBody.
type CreateProjectSettingsRequestBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// TreatmentSchema Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// CreateSegmentRequestBody defines model for CreateSegmentRequestBody.
type CreateSegmentRequestBody struct {
	Name      string                         `json:"name"`
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// CreateSegmenterRequestBody defines model for CreateSegmenterRequestBody.
type CreateSegmenterRequestBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Name        string                         `json:"name"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
	Type        externalRef0.SegmenterType     `json:"type"`
}

// CreateTreatmentRequestBody defines model for CreateTreatmentRequestBody.
type CreateTreatmentRequestBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	Name          string                 `json:"name"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// UpdateExperimentRequestBody defines model for UpdateExperimentRequestBody.
type UpdateExperimentRequestBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// UpdateProjectSettingsRequestBody defines model for UpdateProjectSettingsRequestBody.
type UpdateProjectSettingsRequestBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// TreatmentSchema Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// UpdateSegmentRequestBody defines model for UpdateSegmentRequestBody.
type UpdateSegmentRequestBody struct {
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// UpdateSegmenterRequestBody defines model for UpdateSegmenterRequestBody.
type UpdateSegmenterRequestBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
}

// UpdateTreatmentRequestBody defines model for UpdateTreatmentRequestBody.
type UpdateTreatmentRequestBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// ValidateEntityRequestBody defines model for ValidateEntityRequestBody.
type ValidateEntityRequestBody struct {
	Data map[string]interface{} `json:"data"`

	// TreatmentSchema Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// ListExperimentsParams defines parameters for ListExperiments.
type ListExperimentsParams struct {
	Status *externalRef0.ExperimentStatus `form:"status,omitempty" json:"status,omitempty"`

	// StatusFriendly status_friendly is a combination of the status field, in conjunction with the duration,
	// that produces a user-friendly classification of the experiment statuses. When this parameter
	// is supplied, the status, start_time and end_time filters can also be set. However, the final
	// result would be an intersection of the application of each of these filters.
	StatusFriendly *[]externalRef0.ExperimentStatusFriendly `form:"status_friendly,omitempty" json:"status_friendly,omitempty"`

	// EndTime Used together with the start_time, to filter experiments that are at least partially running in the input range.
	EndTime   *time.Time                   `form:"end_time,omitempty" json:"end_time,omitempty"`
	Tier      *externalRef0.ExperimentTier `form:"tier,omitempty" json:"tier,omitempty"`
	Type      *externalRef0.ExperimentType `form:"type,omitempty" json:"type,omitempty"`
	Name      *string                      `form:"name,omitempty" json:"name,omitempty"`
	UpdatedBy *string                      `form:"updated_by,omitempty" json:"updated_by,omitempty"`

	// Search Search experiment name and description for a partial match of the search text
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Page Result page number. It defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items on each page. It defaults to 10.
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// StartTime Used together with the end_time, to filter experiments that are at least partially running in the input range.
	StartTime *time.Time              `form:"start_time,omitempty" json:"start_time,omitempty"`
	Segment   *map[string]interface{} `form:"segment,omitempty" json:"segment,omitempty"`

	// IncludeWeakMatch controls whether or not weak segmenter matches (experiments where the segmenter is optional) should be returned
	IncludeWeakMatch *bool `form:"include_weak_match,omitempty" json:"include_weak_match,omitempty"`

	// Fields A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.ExperimentField `form:"fields,omitempty" json:"fields,omitempty"`
}

// CreateExperimentJSONBody defines parameters for CreateExperiment.
type CreateExperimentJSONBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Name        string                             `json:"name"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// UpdateExperimentJSONBody defines parameters for UpdateExperiment.
type UpdateExperimentJSONBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// ListExperimentHistoryParams defines parameters for ListExperimentHistory.
type ListExperimentHistoryParams struct {
	// Page Result page number. It defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items on each page. It defaults to 10.
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ListSegmentersParams defines parameters for ListSegmenters.
type ListSegmentersParams struct {
	Scope  *externalRef0.SegmenterScope  `form:"scope,omitempty" json:"scope,omitempty"`
	Status *externalRef0.SegmenterStatus `form:"status,omitempty" json:"status,omitempty"`

	// Search Search treatment name for a partial match of the search text
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// CreateSegmenterJSONBody defines parameters for CreateSegmenter.
type CreateSegmenterJSONBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Name        string                         `json:"name"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
	Type        externalRef0.SegmenterType     `json:"type"`
}

// UpdateSegmenterJSONBody defines parameters for UpdateSegmenter.
type UpdateSegmenterJSONBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
}

// ListSegmentsParams defines parameters for ListSegments.
type ListSegmentsParams struct {
	UpdatedBy *string `form:"updated_by,omitempty" json:"updated_by,omitempty"`

	// Search Search segment name for a partial match of the search text
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Page Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Fields A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.SegmentField `form:"fields,omitempty" json:"fields,omitempty"`
}

// CreateSegmentJSONBody defines parameters for CreateSegment.
type CreateSegmentJSONBody struct {
	Name      string                         `json:"name"`
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// UpdateSegmentJSONBody defines parameters for UpdateSegment.
type UpdateSegmentJSONBody struct {
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// ListSegmentHistoryParams defines parameters for ListSegmentHistory.
type ListSegmentHistoryParams struct {
	// Page Result page number. It defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items on each page. It defaults to 10.
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateProjectSettingsJSONBody defines parameters for CreateProjectSettings.
type CreateProjectSettingsJSONBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// TreatmentSchema Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// UpdateProjectSettingsJSONBody defines parameters for UpdateProjectSettings.
type UpdateProjectSettingsJSONBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// TreatmentSchema Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// ListTreatmentsParams defines parameters for ListTreatments.
type ListTreatmentsParams struct {
	UpdatedBy *string `form:"updated_by,omitempty" json:"updated_by,omitempty"`

	// Search Search treatment name for a partial match of the search text
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Page Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Fields A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.TreatmentField `form:"fields,omitempty" json:"fields,omitempty"`
}

// CreateTreatmentJSONBody defines parameters for CreateTreatment.
type CreateTreatmentJSONBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	Name          string                 `json:"name"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// UpdateTreatmentJSONBody defines parameters for UpdateTreatment.
type UpdateTreatmentJSONBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// ListTreatmentHistoryParams defines parameters for ListTreatmentHistory.
type ListTreatmentHistoryParams struct {
	// Page Result page number. If empty, it defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items on each page. If empty, it defaults to 10.
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ValidateEntityJSONBody defines parameters for ValidateEntity.
type ValidateEntityJSONBody struct {
	Data map[string]interface{} `json:"data"`

	// TreatmentSchema Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// CreateExperimentJSONRequestBody defines body for CreateExperiment for application/json ContentType.
type CreateExperimentJSONRequestBody CreateExperimentJSONBody

// UpdateExperimentJSONRequestBody defines body for UpdateExperiment for application/json ContentType.
type UpdateExperimentJSONRequestBody UpdateExperimentJSONBody

// CreateSegmenterJSONRequestBody defines body for CreateSegmenter for application/json ContentType.
type CreateSegmenterJSONRequestBody CreateSegmenterJSONBody

// UpdateSegmenterJSONRequestBody defines body for UpdateSegmenter for application/json ContentType.
type UpdateSegmenterJSONRequestBody UpdateSegmenterJSONBody

// CreateSegmentJSONRequestBody defines body for CreateSegment for application/json ContentType.
type CreateSegmentJSONRequestBody CreateSegmentJSONBody

// UpdateSegmentJSONRequestBody defines body for UpdateSegment for application/json ContentType.
type UpdateSegmentJSONRequestBody UpdateSegmentJSONBody

// CreateProjectSettingsJSONRequestBody defines body for CreateProjectSettings for application/json ContentType.
type CreateProjectSettingsJSONRequestBody CreateProjectSettingsJSONBody

// UpdateProjectSettingsJSONRequestBody defines body for UpdateProjectSettings for application/json ContentType.
type UpdateProjectSettingsJSONRequestBody UpdateProjectSettingsJSONBody

// CreateTreatmentJSONRequestBody defines body for CreateTreatment for application/json ContentType.
type CreateTreatmentJSONRequestBody CreateTreatmentJSONBody

// UpdateTreatmentJSONRequestBody defines body for UpdateTreatment for application/json ContentType.
type UpdateTreatmentJSONRequestBody UpdateTreatmentJSONBody

// ValidateEntityJSONRequestBody defines body for ValidateEntity for application/json ContentType.
type ValidateEntityJSONRequestBody ValidateEntityJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List info of all projects set up for Experimentation
	// (GET /projects)
	ListProjects(w http.ResponseWriter, r *http.Request)
	// Get all parameters required for generating treatments for the given project
	// (GET /projects/{project_id}/experiment-variables)
	GetProjectExperimentVariables(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get experiments for a project w.r.t. query params
	// (GET /projects/{project_id}/experiments)
	ListExperiments(w http.ResponseWriter, r *http.Request, projectId int64, params ListExperimentsParams)
	// Create a new experiment for a project
	// (POST /projects/{project_id}/experiments)
	CreateExperiment(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get details of an experiment with the given experiment_id and project_id
	// (GET /projects/{project_id}/experiments/{experiment_id})
	GetExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// Update an experiment with the given experiment_id and project_id
	// (PUT /projects/{project_id}/experiments/{experiment_id})
	UpdateExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// Disable an experiment with the given experiment_id and project_id
	// (PUT /projects/{project_id}/experiments/{experiment_id}/disable)
	DisableExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// Enable an experiment with the given experiment_id and project_id
	// (PUT /projects/{project_id}/experiments/{experiment_id}/enable)
	EnableExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64)
	// List an experiment's historical versions
	// (GET /projects/{project_id}/experiments/{experiment_id}/history)
	ListExperimentHistory(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64, params ListExperimentHistoryParams)
	// List an experiment's historical versions
	// (GET /projects/{project_id}/experiments/{experiment_id}/history/{version})
	GetExperimentHistory(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64, version int64)
	// Get all segmenter configurations required for generating experiments for the given project
	// (GET /projects/{project_id}/segmenters)
	ListSegmenters(w http.ResponseWriter, r *http.Request, projectId int64, params ListSegmentersParams)
	// Create a new project-specific segmenter
	// (POST /projects/{project_id}/segmenters)
	CreateSegmenter(w http.ResponseWriter, r *http.Request, projectId int64)
	// Delete a project-specific segmenter
	// (DELETE /projects/{project_id}/segmenters/{name})
	DeleteSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string)
	// Get the global/project-specific segmenter by name
	// (GET /projects/{project_id}/segmenters/{name})
	GetSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string)
	// Update an existing project-specific segmenter
	// (PUT /projects/{project_id}/segmenters/{name})
	UpdateSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string)
	// Get segments for a project w.r.t query params
	// (GET /projects/{project_id}/segments)
	ListSegments(w http.ResponseWriter, r *http.Request, projectId int64, params ListSegmentsParams)
	// Create a new segment for a project
	// (POST /projects/{project_id}/segments)
	CreateSegment(w http.ResponseWriter, r *http.Request, projectId int64)
	// Delete a segment with the given segment_id and project_id
	// (DELETE /projects/{project_id}/segments/{segment_id})
	DeleteSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64)
	// Get details of a segment with the given segment_id and project_id
	// (GET /projects/{project_id}/segments/{segment_id})
	GetSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64)
	// Update a segment with the given segment_id and project_id
	// (PUT /projects/{project_id}/segments/{segment_id})
	UpdateSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64)
	// List a segment's historical versions
	// (GET /projects/{project_id}/segments/{segment_id}/history)
	ListSegmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64, params ListSegmentHistoryParams)
	// Get a segment's historical version
	// (GET /projects/{project_id}/segments/{segment_id}/history/{version})
	GetSegmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64, version int64)
	// Get the settings for the given project
	// (GET /projects/{project_id}/settings)
	GetProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64)
	// Set up new project for Experimentation
	// (POST /projects/{project_id}/settings)
	CreateProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64)
	// Update the settings for the given project
	// (PUT /projects/{project_id}/settings)
	UpdateProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get treatments for a project w.r.t query params
	// (GET /projects/{project_id}/treatments)
	ListTreatments(w http.ResponseWriter, r *http.Request, projectId int64, params ListTreatmentsParams)
	// Create a new treatment for a project
	// (POST /projects/{project_id}/treatments)
	CreateTreatment(w http.ResponseWriter, r *http.Request, projectId int64)
	// Delete a treatment with the given treatment_id and project_id
	// (DELETE /projects/{project_id}/treatments/{treatment_id})
	DeleteTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64)
	// Get details of a treatment with the given treatment_id and project_id
	// (GET /projects/{project_id}/treatments/{treatment_id})
	GetTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64)
	// Update a treatment with the given treatment_id and project_id
	// (PUT /projects/{project_id}/treatments/{treatment_id})
	UpdateTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64)
	// List a treatment's historical versions
	// (GET /projects/{project_id}/treatments/{treatment_id}/history)
	ListTreatmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64, params ListTreatmentHistoryParams)
	// List a treatment's historical versions
	// (GET /projects/{project_id}/treatments/{treatment_id}/history/{version})
	GetTreatmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64, version int64)
	// retrieves treatment service configuration driven by the management service
	// (GET /treatment-service-config)
	GetTreatmentServiceConfig(w http.ResponseWriter, r *http.Request)
	// validates an entity against a given treatment schema or validation url
	// (POST /validate)
	ValidateEntity(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List info of all projects set up for Experimentation
// (GET /projects)
func (_ Unimplemented) ListProjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all parameters required for generating treatments for the given project
// (GET /projects/{project_id}/experiment-variables)
func (_ Unimplemented) GetProjectExperimentVariables(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get experiments for a project w.r.t. query params
// (GET /projects/{project_id}/experiments)
func (_ Unimplemented) ListExperiments(w http.ResponseWriter, r *http.Request, projectId int64, params ListExperimentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new experiment for a project
// (POST /projects/{project_id}/experiments)
func (_ Unimplemented) CreateExperiment(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of an experiment with the given experiment_id and project_id
// (GET /projects/{project_id}/experiments/{experiment_id})
func (_ Unimplemented) GetExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an experiment with the given experiment_id and project_id
// (PUT /projects/{project_id}/experiments/{experiment_id})
func (_ Unimplemented) UpdateExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disable an experiment with the given experiment_id and project_id
// (PUT /projects/{project_id}/experiments/{experiment_id}/disable)
func (_ Unimplemented) DisableExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enable an experiment with the given experiment_id and project_id
// (PUT /projects/{project_id}/experiments/{experiment_id}/enable)
func (_ Unimplemented) EnableExperiment(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List an experiment's historical versions
// (GET /projects/{project_id}/experiments/{experiment_id}/history)
func (_ Unimplemented) ListExperimentHistory(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64, params ListExperimentHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List an experiment's historical versions
// (GET /projects/{project_id}/experiments/{experiment_id}/history/{version})
func (_ Unimplemented) GetExperimentHistory(w http.ResponseWriter, r *http.Request, projectId int64, experimentId int64, version int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all segmenter configurations required for generating experiments for the given project
// (GET /projects/{project_id}/segmenters)
func (_ Unimplemented) ListSegmenters(w http.ResponseWriter, r *http.Request, projectId int64, params ListSegmentersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new project-specific segmenter
// (POST /projects/{project_id}/segmenters)
func (_ Unimplemented) CreateSegmenter(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a project-specific segmenter
// (DELETE /projects/{project_id}/segmenters/{name})
func (_ Unimplemented) DeleteSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the global/project-specific segmenter by name
// (GET /projects/{project_id}/segmenters/{name})
func (_ Unimplemented) GetSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing project-specific segmenter
// (PUT /projects/{project_id}/segmenters/{name})
func (_ Unimplemented) UpdateSegmenter(w http.ResponseWriter, r *http.Request, projectId int64, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get segments for a project w.r.t query params
// (GET /projects/{project_id}/segments)
func (_ Unimplemented) ListSegments(w http.ResponseWriter, r *http.Request, projectId int64, params ListSegmentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new segment for a project
// (POST /projects/{project_id}/segments)
func (_ Unimplemented) CreateSegment(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a segment with the given segment_id and project_id
// (DELETE /projects/{project_id}/segments/{segment_id})
func (_ Unimplemented) DeleteSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a segment with the given segment_id and project_id
// (GET /projects/{project_id}/segments/{segment_id})
func (_ Unimplemented) GetSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a segment with the given segment_id and project_id
// (PUT /projects/{project_id}/segments/{segment_id})
func (_ Unimplemented) UpdateSegment(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List a segment's historical versions
// (GET /projects/{project_id}/segments/{segment_id}/history)
func (_ Unimplemented) ListSegmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64, params ListSegmentHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a segment's historical version
// (GET /projects/{project_id}/segments/{segment_id}/history/{version})
func (_ Unimplemented) GetSegmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, segmentId int64, version int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the settings for the given project
// (GET /projects/{project_id}/settings)
func (_ Unimplemented) GetProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set up new project for Experimentation
// (POST /projects/{project_id}/settings)
func (_ Unimplemented) CreateProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the settings for the given project
// (PUT /projects/{project_id}/settings)
func (_ Unimplemented) UpdateProjectSettings(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get treatments for a project w.r.t query params
// (GET /projects/{project_id}/treatments)
func (_ Unimplemented) ListTreatments(w http.ResponseWriter, r *http.Request, projectId int64, params ListTreatmentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new treatment for a project
// (POST /projects/{project_id}/treatments)
func (_ Unimplemented) CreateTreatment(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a treatment with the given treatment_id and project_id
// (DELETE /projects/{project_id}/treatments/{treatment_id})
func (_ Unimplemented) DeleteTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a treatment with the given treatment_id and project_id
// (GET /projects/{project_id}/treatments/{treatment_id})
func (_ Unimplemented) GetTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a treatment with the given treatment_id and project_id
// (PUT /projects/{project_id}/treatments/{treatment_id})
func (_ Unimplemented) UpdateTreatment(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List a treatment's historical versions
// (GET /projects/{project_id}/treatments/{treatment_id}/history)
func (_ Unimplemented) ListTreatmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64, params ListTreatmentHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List a treatment's historical versions
// (GET /projects/{project_id}/treatments/{treatment_id}/history/{version})
func (_ Unimplemented) GetTreatmentHistory(w http.ResponseWriter, r *http.Request, projectId int64, treatmentId int64, version int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// retrieves treatment service configuration driven by the management service
// (GET /treatment-service-config)
func (_ Unimplemented) GetTreatmentServiceConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// validates an entity against a given treatment schema or validation url
// (POST /validate)
func (_ Unimplemented) ValidateEntity(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectExperimentVariables operation middleware
func (siw *ServerInterfaceWrapper) GetProjectExperimentVariables(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectExperimentVariables(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListExperiments operation middleware
func (siw *ServerInterfaceWrapper) ListExperiments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExperimentsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "status_friendly" -------------

	err = runtime.BindQueryParameter("form", true, false, "status_friendly", r.URL.Query(), &params.StatusFriendly)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status_friendly", Err: err})
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", r.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_time", Err: err})
		return
	}

	// ------------- Optional query parameter "tier" -------------

	err = runtime.BindQueryParameter("form", true, false, "tier", r.URL.Query(), &params.Tier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tier", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "updated_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_by", r.URL.Query(), &params.UpdatedBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "updated_by", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", r.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_time", Err: err})
		return
	}

	// ------------- Optional query parameter "segment" -------------

	err = runtime.BindQueryParameter("form", true, false, "segment", r.URL.Query(), &params.Segment)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "segment", Err: err})
		return
	}

	// ------------- Optional query parameter "include_weak_match" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_weak_match", r.URL.Query(), &params.IncludeWeakMatch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include_weak_match", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExperiments(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateExperiment operation middleware
func (siw *ServerInterfaceWrapper) CreateExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateExperiment(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetExperiment operation middleware
func (siw *ServerInterfaceWrapper) GetExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "experiment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExperiment(w, r, projectId, experimentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateExperiment operation middleware
func (siw *ServerInterfaceWrapper) UpdateExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "experiment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateExperiment(w, r, projectId, experimentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DisableExperiment operation middleware
func (siw *ServerInterfaceWrapper) DisableExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "experiment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DisableExperiment(w, r, projectId, experimentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// EnableExperiment operation middleware
func (siw *ServerInterfaceWrapper) EnableExperiment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "experiment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EnableExperiment(w, r, projectId, experimentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListExperimentHistory operation middleware
func (siw *ServerInterfaceWrapper) ListExperimentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "experiment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExperimentHistoryParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExperimentHistory(w, r, projectId, experimentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetExperimentHistory operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "experiment_id" -------------
	var experimentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, chi.URLParam(r, "experiment_id"), &experimentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "experiment_id", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExperimentHistory(w, r, projectId, experimentId, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSegmenters operation middleware
func (siw *ServerInterfaceWrapper) ListSegmenters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSegmentersParams

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scope", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSegmenters(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSegmenter operation middleware
func (siw *ServerInterfaceWrapper) CreateSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSegmenter(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSegmenter operation middleware
func (siw *ServerInterfaceWrapper) DeleteSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSegmenter(w, r, projectId, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSegmenter operation middleware
func (siw *ServerInterfaceWrapper) GetSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegmenter(w, r, projectId, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSegmenter operation middleware
func (siw *ServerInterfaceWrapper) UpdateSegmenter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSegmenter(w, r, projectId, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSegments operation middleware
func (siw *ServerInterfaceWrapper) ListSegments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSegmentsParams

	// ------------- Optional query parameter "updated_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_by", r.URL.Query(), &params.UpdatedBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "updated_by", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSegments(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSegment operation middleware
func (siw *ServerInterfaceWrapper) CreateSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSegment(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSegment operation middleware
func (siw *ServerInterfaceWrapper) DeleteSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "segment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSegment(w, r, projectId, segmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSegment operation middleware
func (siw *ServerInterfaceWrapper) GetSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "segment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegment(w, r, projectId, segmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSegment operation middleware
func (siw *ServerInterfaceWrapper) UpdateSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "segment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSegment(w, r, projectId, segmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSegmentHistory operation middleware
func (siw *ServerInterfaceWrapper) ListSegmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "segment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSegmentHistoryParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSegmentHistory(w, r, projectId, segmentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSegmentHistory operation middleware
func (siw *ServerInterfaceWrapper) GetSegmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "segment_id" -------------
	var segmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, chi.URLParam(r, "segment_id"), &segmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "segment_id", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegmentHistory(w, r, projectId, segmentId, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectSettings operation middleware
func (siw *ServerInterfaceWrapper) GetProjectSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectSettings(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProjectSettings operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectSettings(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateProjectSettings operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectSettings(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTreatments operation middleware
func (siw *ServerInterfaceWrapper) ListTreatments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTreatmentsParams

	// ------------- Optional query parameter "updated_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_by", r.URL.Query(), &params.UpdatedBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "updated_by", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTreatments(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTreatment operation middleware
func (siw *ServerInterfaceWrapper) CreateTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTreatment(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTreatment operation middleware
func (siw *ServerInterfaceWrapper) DeleteTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "treatment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTreatment(w, r, projectId, treatmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTreatment operation middleware
func (siw *ServerInterfaceWrapper) GetTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "treatment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTreatment(w, r, projectId, treatmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTreatment operation middleware
func (siw *ServerInterfaceWrapper) UpdateTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "treatment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTreatment(w, r, projectId, treatmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTreatmentHistory operation middleware
func (siw *ServerInterfaceWrapper) ListTreatmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "treatment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTreatmentHistoryParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTreatmentHistory(w, r, projectId, treatmentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTreatmentHistory operation middleware
func (siw *ServerInterfaceWrapper) GetTreatmentHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "treatment_id" -------------
	var treatmentId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, chi.URLParam(r, "treatment_id"), &treatmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "treatment_id", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTreatmentHistory(w, r, projectId, treatmentId, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTreatmentServiceConfig operation middleware
func (siw *ServerInterfaceWrapper) GetTreatmentServiceConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTreatmentServiceConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ValidateEntity operation middleware
func (siw *ServerInterfaceWrapper) ValidateEntity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateEntity(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.ListProjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiment-variables", wrapper.GetProjectExperimentVariables)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments", wrapper.ListExperiments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/experiments", wrapper.CreateExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}", wrapper.GetExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}", wrapper.UpdateExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/disable", wrapper.DisableExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/enable", wrapper.EnableExperiment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/history", wrapper.ListExperimentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/experiments/{experiment_id}/history/{version}", wrapper.GetExperimentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segmenters", wrapper.ListSegmenters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/segmenters", wrapper.CreateSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/segmenters/{name}", wrapper.DeleteSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segmenters/{name}", wrapper.GetSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/segmenters/{name}", wrapper.UpdateSegmenter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments", wrapper.ListSegments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/segments", wrapper.CreateSegment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/segments/{segment_id}", wrapper.DeleteSegment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments/{segment_id}", wrapper.GetSegment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/segments/{segment_id}", wrapper.UpdateSegment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments/{segment_id}/history", wrapper.ListSegmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/segments/{segment_id}/history/{version}", wrapper.GetSegmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/settings", wrapper.GetProjectSettings)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/settings", wrapper.CreateProjectSettings)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/settings", wrapper.UpdateProjectSettings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments", wrapper.ListTreatments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/treatments", wrapper.CreateTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}", wrapper.DeleteTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}", wrapper.GetTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}", wrapper.UpdateTreatment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}/history", wrapper.ListTreatmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/treatments/{treatment_id}/history/{version}", wrapper.GetTreatmentHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/treatment-service-config", wrapper.GetTreatmentServiceConfig)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/validate", wrapper.ValidateEntity)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
