// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/gojek/turing-experiments/management-service/models"
	pagination "github.com/gojek/turing-experiments/management-service/pagination"
	mock "github.com/stretchr/testify/mock"

	services "github.com/gojek/turing-experiments/management-service/services"
)

// ExperimentHistoryService is an autogenerated mock type for the ExperimentHistoryService type
type ExperimentHistoryService struct {
	mock.Mock
}

// CreateExperimentHistory provides a mock function with given fields: _a0
func (_m *ExperimentHistoryService) CreateExperimentHistory(_a0 *models.Experiment) (*models.ExperimentHistory, error) {
	ret := _m.Called(_a0)

	var r0 *models.ExperimentHistory
	if rf, ok := ret.Get(0).(func(*models.Experiment) *models.ExperimentHistory); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExperimentHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Experiment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBRecord provides a mock function with given fields: experimentId, version
func (_m *ExperimentHistoryService) GetDBRecord(experimentId models.ID, version int64) (*models.ExperimentHistory, error) {
	ret := _m.Called(experimentId, version)

	var r0 *models.ExperimentHistory
	if rf, ok := ret.Get(0).(func(models.ID, int64) *models.ExperimentHistory); ok {
		r0 = rf(experimentId, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExperimentHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, int64) error); ok {
		r1 = rf(experimentId, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperimentHistory provides a mock function with given fields: experimentId, version
func (_m *ExperimentHistoryService) GetExperimentHistory(experimentId int64, version int64) (*models.ExperimentHistory, error) {
	ret := _m.Called(experimentId, version)

	var r0 *models.ExperimentHistory
	if rf, ok := ret.Get(0).(func(int64, int64) *models.ExperimentHistory); ok {
		r0 = rf(experimentId, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExperimentHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(experimentId, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExperimentHistory provides a mock function with given fields: experimentId, params
func (_m *ExperimentHistoryService) ListExperimentHistory(experimentId int64, params services.ListExperimentHistoryParams) ([]*models.ExperimentHistory, *pagination.Paging, error) {
	ret := _m.Called(experimentId, params)

	var r0 []*models.ExperimentHistory
	if rf, ok := ret.Get(0).(func(int64, services.ListExperimentHistoryParams) []*models.ExperimentHistory); ok {
		r0 = rf(experimentId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExperimentHistory)
		}
	}

	var r1 *pagination.Paging
	if rf, ok := ret.Get(1).(func(int64, services.ListExperimentHistoryParams) *pagination.Paging); ok {
		r1 = rf(experimentId, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.Paging)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int64, services.ListExperimentHistoryParams) error); ok {
		r2 = rf(experimentId, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
