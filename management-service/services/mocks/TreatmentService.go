// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	models "github.com/caraml-dev/xp/management-service/models"
	pagination "github.com/caraml-dev/xp/management-service/pagination"
	mock "github.com/stretchr/testify/mock"

	services "github.com/caraml-dev/xp/management-service/services"
)

// TreatmentService is an autogenerated mock type for the TreatmentService type
type TreatmentService struct {
	mock.Mock
}

// CreateTreatment provides a mock function with given fields: settings, treatmentData
func (_m *TreatmentService) CreateTreatment(settings models.Settings, treatmentData services.CreateTreatmentRequestBody) (*models.Treatment, error) {
	ret := _m.Called(settings, treatmentData)

	var r0 *models.Treatment
	if rf, ok := ret.Get(0).(func(models.Settings, services.CreateTreatmentRequestBody) *models.Treatment); ok {
		r0 = rf(settings, treatmentData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Treatment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Settings, services.CreateTreatmentRequestBody) error); ok {
		r1 = rf(settings, treatmentData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTreatment provides a mock function with given fields: projectId, treatmentId
func (_m *TreatmentService) DeleteTreatment(projectId int64, treatmentId int64) error {
	ret := _m.Called(projectId, treatmentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(projectId, treatmentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDBRecord provides a mock function with given fields: projectId, treatmentId
func (_m *TreatmentService) GetDBRecord(projectId models.ID, treatmentId models.ID) (*models.Treatment, error) {
	ret := _m.Called(projectId, treatmentId)

	var r0 *models.Treatment
	if rf, ok := ret.Get(0).(func(models.ID, models.ID) *models.Treatment); ok {
		r0 = rf(projectId, treatmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Treatment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, models.ID) error); ok {
		r1 = rf(projectId, treatmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTreatment provides a mock function with given fields: projectId, treatmentId
func (_m *TreatmentService) GetTreatment(projectId int64, treatmentId int64) (*models.Treatment, error) {
	ret := _m.Called(projectId, treatmentId)

	var r0 *models.Treatment
	if rf, ok := ret.Get(0).(func(int64, int64) *models.Treatment); ok {
		r0 = rf(projectId, treatmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Treatment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(projectId, treatmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTreatments provides a mock function with given fields: projectId, params
func (_m *TreatmentService) ListTreatments(projectId int64, params services.ListTreatmentsParams) ([]*models.Treatment, *pagination.Paging, error) {
	ret := _m.Called(projectId, params)

	var r0 []*models.Treatment
	if rf, ok := ret.Get(0).(func(int64, services.ListTreatmentsParams) []*models.Treatment); ok {
		r0 = rf(projectId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Treatment)
		}
	}

	var r1 *pagination.Paging
	if rf, ok := ret.Get(1).(func(int64, services.ListTreatmentsParams) *pagination.Paging); ok {
		r1 = rf(projectId, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.Paging)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int64, services.ListTreatmentsParams) error); ok {
		r2 = rf(projectId, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RunCustomValidation provides a mock function with given fields: treatmentConfig, settings, context, operationType
func (_m *TreatmentService) RunCustomValidation(treatmentConfig map[string]interface{}, settings models.Settings, context services.ValidationContext, operationType services.OperationType) error {
	ret := _m.Called(treatmentConfig, settings, context, operationType)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, models.Settings, services.ValidationContext, services.OperationType) error); ok {
		r0 = rf(treatmentConfig, settings, context, operationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTreatment provides a mock function with given fields: settings, treatmentId, treatmentData
func (_m *TreatmentService) UpdateTreatment(settings models.Settings, treatmentId int64, treatmentData services.UpdateTreatmentRequestBody) (*models.Treatment, error) {
	ret := _m.Called(settings, treatmentId, treatmentData)

	var r0 *models.Treatment
	if rf, ok := ret.Get(0).(func(models.Settings, int64, services.UpdateTreatmentRequestBody) *models.Treatment); ok {
		r0 = rf(settings, treatmentId, treatmentData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Treatment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Settings, int64, services.UpdateTreatmentRequestBody) error); ok {
		r1 = rf(settings, treatmentId, treatmentData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
