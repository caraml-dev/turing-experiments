// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	schema "github.com/gojek/turing-experiments/common/api/schema"
	models "github.com/gojek/turing-experiments/management-service/models"
	mock "github.com/stretchr/testify/mock"

	segmenters "github.com/gojek/turing-experiments/common/segmenters"
)

// SegmenterService is an autogenerated mock type for the SegmenterService type
type SegmenterService struct {
	mock.Mock
}

// GetFormattedSegmenters provides a mock function with given fields: expSegment
func (_m *SegmenterService) GetFormattedSegmenters(expSegment models.ExperimentSegmentRaw) (map[string]*[]interface{}, error) {
	ret := _m.Called(expSegment)

	var r0 map[string]*[]interface{}
	if rf, ok := ret.Get(0).(func(models.ExperimentSegmentRaw) map[string]*[]interface{}); ok {
		r0 = rf(expSegment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*[]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ExperimentSegmentRaw) error); ok {
		r1 = rf(expSegment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmenterConfigurations provides a mock function with given fields: segmenterNames
func (_m *SegmenterService) GetSegmenterConfigurations(segmenterNames []string) ([]*segmenters.SegmenterConfiguration, error) {
	ret := _m.Called(segmenterNames)

	var r0 []*segmenters.SegmenterConfiguration
	if rf, ok := ret.Get(0).(func([]string) []*segmenters.SegmenterConfiguration); ok {
		r0 = rf(segmenterNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*segmenters.SegmenterConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(segmenterNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmenterTypes provides a mock function with given fields:
func (_m *SegmenterService) GetSegmenterTypes() map[string]schema.SegmenterType {
	ret := _m.Called()

	var r0 map[string]schema.SegmenterType
	if rf, ok := ret.Get(0).(func() map[string]schema.SegmenterType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]schema.SegmenterType)
		}
	}

	return r0
}

// ListSegmenterNames provides a mock function with given fields:
func (_m *SegmenterService) ListSegmenterNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ValidateExperimentSegment provides a mock function with given fields: userSegmenters, expSegment
func (_m *SegmenterService) ValidateExperimentSegment(userSegmenters []string, expSegment models.ExperimentSegmentRaw) error {
	ret := _m.Called(userSegmenters, expSegment)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, models.ExperimentSegmentRaw) error); ok {
		r0 = rf(userSegmenters, expSegment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateExperimentVariables provides a mock function with given fields: projectSegmenters
func (_m *SegmenterService) ValidateExperimentVariables(projectSegmenters models.ProjectSegmenters) error {
	ret := _m.Called(projectSegmenters)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ProjectSegmenters) error); ok {
		r0 = rf(projectSegmenters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePrereqSegmenters provides a mock function with given fields: _a0
func (_m *SegmenterService) ValidatePrereqSegmenters(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRequiredSegmenters provides a mock function with given fields: _a0
func (_m *SegmenterService) ValidateRequiredSegmenters(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSegmentOrthogonality provides a mock function with given fields: userSegmenters, expSegment, allExps
func (_m *SegmenterService) ValidateSegmentOrthogonality(userSegmenters []string, expSegment models.ExperimentSegmentRaw, allExps []models.Experiment) error {
	ret := _m.Called(userSegmenters, expSegment, allExps)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, models.ExperimentSegmentRaw, []models.Experiment) error); ok {
		r0 = rf(userSegmenters, expSegment, allExps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
