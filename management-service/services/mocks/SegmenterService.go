// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	schema "github.com/caraml-dev/xp/common/api/schema"
	models "github.com/caraml-dev/xp/management-service/models"
	mock "github.com/stretchr/testify/mock"

	segmenters "github.com/caraml-dev/xp/common/segmenters"

	services "github.com/caraml-dev/xp/management-service/services"
)

// SegmenterService is an autogenerated mock type for the SegmenterService type
type SegmenterService struct {
	mock.Mock
}

// CreateCustomSegmenter provides a mock function with given fields: projectId, customSegmenterData
func (_m *SegmenterService) CreateCustomSegmenter(projectId int64, customSegmenterData services.CreateCustomSegmenterRequestBody) (*models.CustomSegmenter, error) {
	ret := _m.Called(projectId, customSegmenterData)

	var r0 *models.CustomSegmenter
	if rf, ok := ret.Get(0).(func(int64, services.CreateCustomSegmenterRequestBody) *models.CustomSegmenter); ok {
		r0 = rf(projectId, customSegmenterData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CustomSegmenter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, services.CreateCustomSegmenterRequestBody) error); ok {
		r1 = rf(projectId, customSegmenterData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomSegmenter provides a mock function with given fields: projectId, name
func (_m *SegmenterService) DeleteCustomSegmenter(projectId int64, name string) error {
	ret := _m.Called(projectId, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(projectId, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomSegmenter provides a mock function with given fields: projectId, name
func (_m *SegmenterService) GetCustomSegmenter(projectId int64, name string) (*models.CustomSegmenter, error) {
	ret := _m.Called(projectId, name)

	var r0 *models.CustomSegmenter
	if rf, ok := ret.Get(0).(func(int64, string) *models.CustomSegmenter); ok {
		r0 = rf(projectId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CustomSegmenter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(projectId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBRecord provides a mock function with given fields: projectId, name
func (_m *SegmenterService) GetDBRecord(projectId models.ID, name string) (*models.CustomSegmenter, error) {
	ret := _m.Called(projectId, name)

	var r0 *models.CustomSegmenter
	if rf, ok := ret.Get(0).(func(models.ID, string) *models.CustomSegmenter); ok {
		r0 = rf(projectId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CustomSegmenter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, string) error); ok {
		r1 = rf(projectId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFormattedSegmenters provides a mock function with given fields: projectId, expSegment
func (_m *SegmenterService) GetFormattedSegmenters(projectId int64, expSegment models.ExperimentSegmentRaw) (map[string]*[]interface{}, error) {
	ret := _m.Called(projectId, expSegment)

	var r0 map[string]*[]interface{}
	if rf, ok := ret.Get(0).(func(int64, models.ExperimentSegmentRaw) map[string]*[]interface{}); ok {
		r0 = rf(projectId, expSegment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*[]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, models.ExperimentSegmentRaw) error); ok {
		r1 = rf(projectId, expSegment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmenter provides a mock function with given fields: projectId, name
func (_m *SegmenterService) GetSegmenter(projectId int64, name string) (*schema.Segmenter, error) {
	ret := _m.Called(projectId, name)

	var r0 *schema.Segmenter
	if rf, ok := ret.Get(0).(func(int64, string) *schema.Segmenter); ok {
		r0 = rf(projectId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Segmenter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(projectId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmenterConfigurations provides a mock function with given fields: projectId, segmenterNames
func (_m *SegmenterService) GetSegmenterConfigurations(projectId int64, segmenterNames []string) ([]*segmenters.SegmenterConfiguration, error) {
	ret := _m.Called(projectId, segmenterNames)

	var r0 []*segmenters.SegmenterConfiguration
	if rf, ok := ret.Get(0).(func(int64, []string) []*segmenters.SegmenterConfiguration); ok {
		r0 = rf(projectId, segmenterNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*segmenters.SegmenterConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, []string) error); ok {
		r1 = rf(projectId, segmenterNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmenterTypes provides a mock function with given fields: projectId
func (_m *SegmenterService) GetSegmenterTypes(projectId int64) (map[string]schema.SegmenterType, error) {
	ret := _m.Called(projectId)

	var r0 map[string]schema.SegmenterType
	if rf, ok := ret.Get(0).(func(int64) map[string]schema.SegmenterType); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]schema.SegmenterType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGlobalSegmenters provides a mock function with given fields:
func (_m *SegmenterService) ListGlobalSegmenters() ([]*schema.Segmenter, error) {
	ret := _m.Called()

	var r0 []*schema.Segmenter
	if rf, ok := ret.Get(0).(func() []*schema.Segmenter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*schema.Segmenter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSegmenters provides a mock function with given fields: projectId, params
func (_m *SegmenterService) ListSegmenters(projectId int64, params services.ListSegmentersParams) ([]*schema.Segmenter, error) {
	ret := _m.Called(projectId, params)

	var r0 []*schema.Segmenter
	if rf, ok := ret.Get(0).(func(int64, services.ListSegmentersParams) []*schema.Segmenter); ok {
		r0 = rf(projectId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*schema.Segmenter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, services.ListSegmentersParams) error); ok {
		r1 = rf(projectId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomSegmenter provides a mock function with given fields: projectId, name, customSegmenterData
func (_m *SegmenterService) UpdateCustomSegmenter(projectId int64, name string, customSegmenterData services.UpdateCustomSegmenterRequestBody) (*models.CustomSegmenter, error) {
	ret := _m.Called(projectId, name, customSegmenterData)

	var r0 *models.CustomSegmenter
	if rf, ok := ret.Get(0).(func(int64, string, services.UpdateCustomSegmenterRequestBody) *models.CustomSegmenter); ok {
		r0 = rf(projectId, name, customSegmenterData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CustomSegmenter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, services.UpdateCustomSegmenterRequestBody) error); ok {
		r1 = rf(projectId, name, customSegmenterData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateExperimentSegment provides a mock function with given fields: projectId, userSegmenters, expSegment
func (_m *SegmenterService) ValidateExperimentSegment(projectId int64, userSegmenters []string, expSegment models.ExperimentSegmentRaw) error {
	ret := _m.Called(projectId, userSegmenters, expSegment)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []string, models.ExperimentSegmentRaw) error); ok {
		r0 = rf(projectId, userSegmenters, expSegment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateExperimentVariables provides a mock function with given fields: projectId, projectSegmenters
func (_m *SegmenterService) ValidateExperimentVariables(projectId int64, projectSegmenters models.ProjectSegmenters) error {
	ret := _m.Called(projectId, projectSegmenters)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, models.ProjectSegmenters) error); ok {
		r0 = rf(projectId, projectSegmenters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePrereqSegmenters provides a mock function with given fields: projectId, _a1
func (_m *SegmenterService) ValidatePrereqSegmenters(projectId int64, _a1 []string) error {
	ret := _m.Called(projectId, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []string) error); ok {
		r0 = rf(projectId, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRequiredSegmenters provides a mock function with given fields: projectId, _a1
func (_m *SegmenterService) ValidateRequiredSegmenters(projectId int64, _a1 []string) error {
	ret := _m.Called(projectId, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []string) error); ok {
		r0 = rf(projectId, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSegmentOrthogonality provides a mock function with given fields: projectId, userSegmenters, expSegment, allExps
func (_m *SegmenterService) ValidateSegmentOrthogonality(projectId int64, userSegmenters []string, expSegment models.ExperimentSegmentRaw, allExps []models.Experiment) error {
	ret := _m.Called(projectId, userSegmenters, expSegment, allExps)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []string, models.ExperimentSegmentRaw, []models.Experiment) error); ok {
		r0 = rf(projectId, userSegmenters, expSegment, allExps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
