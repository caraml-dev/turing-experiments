// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	models "github.com/caraml-dev/xp/management-service/models"
	pagination "github.com/caraml-dev/xp/management-service/pagination"
	mock "github.com/stretchr/testify/mock"

	services "github.com/caraml-dev/xp/management-service/services"
)

// SegmentService is an autogenerated mock type for the SegmentService type
type SegmentService struct {
	mock.Mock
}

// CreateSegment provides a mock function with given fields: settings, segmentData
func (_m *SegmentService) CreateSegment(settings models.Settings, segmentData services.CreateSegmentRequestBody) (*models.Segment, error) {
	ret := _m.Called(settings, segmentData)

	var r0 *models.Segment
	if rf, ok := ret.Get(0).(func(models.Settings, services.CreateSegmentRequestBody) *models.Segment); ok {
		r0 = rf(settings, segmentData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Segment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Settings, services.CreateSegmentRequestBody) error); ok {
		r1 = rf(settings, segmentData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegment provides a mock function with given fields: projectId, segmentId
func (_m *SegmentService) DeleteSegment(projectId int64, segmentId int64) error {
	ret := _m.Called(projectId, segmentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(projectId, segmentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDBRecord provides a mock function with given fields: projectId, segmentId
func (_m *SegmentService) GetDBRecord(projectId models.ID, segmentId models.ID) (*models.Segment, error) {
	ret := _m.Called(projectId, segmentId)

	var r0 *models.Segment
	if rf, ok := ret.Get(0).(func(models.ID, models.ID) *models.Segment); ok {
		r0 = rf(projectId, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Segment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, models.ID) error); ok {
		r1 = rf(projectId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegment provides a mock function with given fields: projectId, segmentId
func (_m *SegmentService) GetSegment(projectId int64, segmentId int64) (*models.Segment, error) {
	ret := _m.Called(projectId, segmentId)

	var r0 *models.Segment
	if rf, ok := ret.Get(0).(func(int64, int64) *models.Segment); ok {
		r0 = rf(projectId, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Segment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(projectId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSegments provides a mock function with given fields: projectId, params
func (_m *SegmentService) ListSegments(projectId int64, params services.ListSegmentsParams) ([]*models.Segment, *pagination.Paging, error) {
	ret := _m.Called(projectId, params)

	var r0 []*models.Segment
	if rf, ok := ret.Get(0).(func(int64, services.ListSegmentsParams) []*models.Segment); ok {
		r0 = rf(projectId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Segment)
		}
	}

	var r1 *pagination.Paging
	if rf, ok := ret.Get(1).(func(int64, services.ListSegmentsParams) *pagination.Paging); ok {
		r1 = rf(projectId, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.Paging)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int64, services.ListSegmentsParams) error); ok {
		r2 = rf(projectId, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateSegment provides a mock function with given fields: settings, segmentId, segmentData
func (_m *SegmentService) UpdateSegment(settings models.Settings, segmentId int64, segmentData services.UpdateSegmentRequestBody) (*models.Segment, error) {
	ret := _m.Called(settings, segmentId, segmentData)

	var r0 *models.Segment
	if rf, ok := ret.Get(0).(func(models.Settings, int64, services.UpdateSegmentRequestBody) *models.Segment); ok {
		r0 = rf(settings, segmentId, segmentData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Segment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Settings, int64, services.UpdateSegmentRequestBody) error); ok {
		r1 = rf(settings, segmentId, segmentData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
