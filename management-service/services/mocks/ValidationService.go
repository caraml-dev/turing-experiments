// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	services "github.com/gojek/turing-experiments/management-service/services"
	mock "github.com/stretchr/testify/mock"
)

// ValidationService is an autogenerated mock type for the ValidationService type
type ValidationService struct {
	mock.Mock
}

// Validate provides a mock function with given fields: data
func (_m *ValidationService) Validate(data interface{}) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateEntityWithExternalUrl provides a mock function with given fields: operation, entityType, data, context, validationUrl
func (_m *ValidationService) ValidateEntityWithExternalUrl(operation services.OperationType, entityType services.EntityType, data interface{}, context services.ValidationContext, validationUrl *string) error {
	ret := _m.Called(operation, entityType, data, context, validationUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(services.OperationType, services.EntityType, interface{}, services.ValidationContext, *string) error); ok {
		r0 = rf(operation, entityType, data, context, validationUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateWithExternalUrl provides a mock function with given fields: reqBody, validationUrl
func (_m *ValidationService) ValidateWithExternalUrl(reqBody []byte, validationUrl *string) error {
	ret := _m.Called(reqBody, validationUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *string) error); ok {
		r0 = rf(reqBody, validationUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
