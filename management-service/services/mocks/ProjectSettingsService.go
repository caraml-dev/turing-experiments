// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/gojek/turing-experiments/management-service/models"
	services "github.com/gojek/turing-experiments/management-service/services"
	mock "github.com/stretchr/testify/mock"
)

// ProjectSettingsService is an autogenerated mock type for the ProjectSettingsService type
type ProjectSettingsService struct {
	mock.Mock
}

// CreateProjectSettings provides a mock function with given fields: projectId, settings
func (_m *ProjectSettingsService) CreateProjectSettings(projectId int64, settings services.CreateProjectSettingsRequestBody) (*models.Settings, error) {
	ret := _m.Called(projectId, settings)

	var r0 *models.Settings
	if rf, ok := ret.Get(0).(func(int64, services.CreateProjectSettingsRequestBody) *models.Settings); ok {
		r0 = rf(projectId, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Settings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, services.CreateProjectSettingsRequestBody) error); ok {
		r1 = rf(projectId, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBRecord provides a mock function with given fields: projectId
func (_m *ProjectSettingsService) GetDBRecord(projectId models.ID) (*models.Settings, error) {
	ret := _m.Called(projectId)

	var r0 *models.Settings
	if rf, ok := ret.Get(0).(func(models.ID) *models.Settings); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Settings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperimentVariables provides a mock function with given fields: projectId
func (_m *ProjectSettingsService) GetExperimentVariables(projectId int64) (*[]string, error) {
	ret := _m.Called(projectId)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(int64) *[]string); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectSettings provides a mock function with given fields: projectId
func (_m *ProjectSettingsService) GetProjectSettings(projectId int64) (*models.Settings, error) {
	ret := _m.Called(projectId)

	var r0 *models.Settings
	if rf, ok := ret.Get(0).(func(int64) *models.Settings); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Settings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields:
func (_m *ProjectSettingsService) ListProjects() (*[]models.Project, error) {
	ret := _m.Called()

	var r0 *[]models.Project
	if rf, ok := ret.Get(0).(func() *[]models.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectSettings provides a mock function with given fields: projectId, settings
func (_m *ProjectSettingsService) UpdateProjectSettings(projectId int64, settings services.UpdateProjectSettingsRequestBody) (*models.Settings, error) {
	ret := _m.Called(projectId, settings)

	var r0 *models.Settings
	if rf, ok := ret.Get(0).(func(int64, services.UpdateProjectSettingsRequestBody) *models.Settings); ok {
		r0 = rf(projectId, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Settings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, services.UpdateProjectSettingsRequestBody) error); ok {
		r1 = rf(projectId, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
