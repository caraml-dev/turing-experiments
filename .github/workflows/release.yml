name: XP Release

on:
  workflow_call:
    inputs:
      container_registry:
        type: string
        required: false
        default: ghcr.io
      environment:
        type: string
        required: false
    secrets:
      ghcr_token:
        required: true

env:
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  build-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui
    steps:
      - name: Checkout to the target branch
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache YARN
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --network-concurrency 1

      - name: Lint code
        run: yarn lint

      - name: Build UI
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: yarn build

      - name: Publish Artifact
        uses: actions/upload-artifact@v3
        with:
          name: xp-ui-dist
          path: ui/build/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-management-service:
    runs-on: ubuntu-latest
    env:
      APP_NAME: xp-management
    needs:
      - build-ui
    outputs:
      api-version: ${{ steps.build-image.outputs.api-version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download UI Dist
        uses: actions/download-artifact@v2
        with:
          name: xp-ui-dist
          path: ui/build

      - name: Download Management Service binary
        uses: actions/download-artifact@v2
        with:
          name: management-service-binary
          path: management-service/bin/

      - run: ls ~/management-service/bin/
      - run: ls management-service/bin/
      - run: ls ./management-service/bin/

      - name: Build Docker image
        id: build-image
        run: |
          set -o pipefail
          make BIN_NAME=$APP_NAME build-image | tee output.log
          echo "::set-output name=api-version::$(sed -n 's%xp-api version: \(.*\)%\1%p' output.log)"

      - name: Save Docker image
        run: |
          docker image save \
            --output xp-management.${{ steps.build-image.outputs.api-version }}.tar \
            xp-management:${{ steps.build-image.outputs.api-version }}

      - name: Publish Artifact
        uses: actions/upload-artifact@v3
        with:
          name: xp-management.${{ steps.build-image.outputs.api-version }}.tar
          path: xp-management.${{ steps.build-image.outputs.api-version }}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-treatment-service:
    runs-on: ubuntu-latest
    env:
      APP_NAME: xp-treatment
    outputs:
      api-version: ${{ steps.build-image.outputs.api-version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download Treatment Service binary
        uses: actions/download-artifact@v2
        with:
          name: treatment-service-binary
          path: treatment-service/bin/

      - name: Build Docker image
        id: build-image
        working-directory: treatment-service
        run: |
          set -o pipefail
          make BIN_NAME=$APP_NAME build-image | tee output.log
          echo "::set-output name=api-version::$(sed -n 's%xp-api version: \(.*\)%\1%p' output.log)"

      - name: Save Docker image
        run: |
          docker image save \
            --output xp-treatment.${{ steps.build-image.outputs.api-version }}.tar \
            xp-treatment:${{ steps.build-image.outputs.api-version }}

      - name: Publish Artifact
        uses: actions/upload-artifact@v3
        with:
          name: xp-treatment.${{ steps.build-image.outputs.api-version }}.tar
          path: xp-treatment.${{ steps.build-image.outputs.api-version }}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  publish-management-service:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs:
      - build-management-service
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      - name: Download Docker image tar
        uses: actions/download-artifact@v2
        with:
          name: xp-management.${{ needs.build-management-service.outputs.api-version }}.tar

      - name: Publish Docker Image
        env:
          DOCKER_REPOSITORY: ${{ inputs.container_registry }}/${{ github.repository }}
        run: |
          docker image load --input xp-management.${{ needs.build-management-service.outputs.api-version }}.tar
          docker tag \
            xp-management:${{ needs.build-management-service.outputs.api-version }} \
            ${{ env.DOCKER_REPOSITORY }}/xp-management:${{ needs.build-management-service.outputs.api-version }}
          docker push ${{ env.DOCKER_REPOSITORY }}/xp-management:${{ needs.build-management-service.outputs.api-version }}
  
  publish-treatment-service:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs:
      - build-treatment-service
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      - name: Download Docker image tar
        uses: actions/download-artifact@v2
        with:
          name: xp-treatment.${{ needs.build-treatment-service.outputs.api-version }}.tar

      - name: Publish Docker Image
        env:
          DOCKER_REPOSITORY: ${{ inputs.container_registry }}/${{ github.repository }}
        run: |
          docker image load --input xp-treatment.${{ needs.build-treatment-service.outputs.api-version }}.tar
          docker tag \
            xp-treatment:${{ needs.build-treatment-service.outputs.api-version }} \
            ${{ env.DOCKER_REPOSITORY }}/xp-treatment:${{ needs.build-treatment-service.outputs.api-version }}
          docker push ${{ env.DOCKER_REPOSITORY }}/xp-treatment:${{ needs.build-treatment-service.outputs.api-version }}
