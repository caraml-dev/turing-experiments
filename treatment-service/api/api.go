// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/caraml-dev/xp/common/api/schema"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// FetchTreatmentBadRequest defines model for FetchTreatmentBadRequest.
type FetchTreatmentBadRequest = externalRef0.Error

// FetchTreatmentSuccess defines model for FetchTreatmentSuccess.
type FetchTreatmentSuccess struct {
	Data *externalRef0.SelectedTreatment `json:"data,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = externalRef0.Error

// FetchTreatmentRequestBody defines model for FetchTreatmentRequestBody.
type FetchTreatmentRequestBody map[string]FetchTreatmentRequestBody_AdditionalProperties

// FetchTreatmentJSONBody defines parameters for FetchTreatment.
type FetchTreatmentJSONBody map[string]FetchTreatmentJSONBody_AdditionalProperties

// FetchTreatmentParams defines parameters for FetchTreatment.
type FetchTreatmentParams struct {
	PassKey string `json:"pass-key"`
}

// FetchTreatmentJSONBody0 defines parameters for FetchTreatment.
type FetchTreatmentJSONBody0 = string

// FetchTreatmentJSONBody1 defines parameters for FetchTreatment.
type FetchTreatmentJSONBody1 = int64

// FetchTreatmentJSONBody2 defines parameters for FetchTreatment.
type FetchTreatmentJSONBody2 = bool

// FetchTreatmentJSONBody_AdditionalProperties defines parameters for FetchTreatment.
type FetchTreatmentJSONBody_AdditionalProperties struct {
	union json.RawMessage
}

// FetchTreatmentJSONRequestBody defines body for FetchTreatment for application/json ContentType.
type FetchTreatmentJSONRequestBody FetchTreatmentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Fetch treatment for the given request parameters and project
	// (POST /projects/{project_id}/fetch-treatment)
	FetchTreatment(w http.ResponseWriter, r *http.Request, projectId int64, params FetchTreatmentParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Fetch treatment for the given request parameters and project
// (POST /projects/{project_id}/fetch-treatment)
func (_ Unimplemented) FetchTreatment(w http.ResponseWriter, r *http.Request, projectId int64, params FetchTreatmentParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FetchTreatment operation middleware
func (siw *ServerInterfaceWrapper) FetchTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "project_id", runtime.ParamLocationPath, chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params FetchTreatmentParams

	headers := r.Header

	// ------------- Required header parameter "pass-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("pass-key")]; found {
		var PassKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "pass-key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "pass-key", runtime.ParamLocationHeader, valueList[0], &PassKey)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pass-key", Err: err})
			return
		}

		params.PassKey = PassKey

	} else {
		err := fmt.Errorf("Header parameter pass-key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "pass-key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchTreatment(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/fetch-treatment", wrapper.FetchTreatment)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXXW/bNhT9K8Td9ibZTpwNmN6StQP80DVYAmxAHbS0eCWxkUiNpOy4hv77QFKfthw4",
	"BYa92RR5v845l5cHiGVRSoHCaIgOoPCfCrW5k4yjW/gdTZw9KqSmQGH+7D7v7cdYCoPC2J+0LHMeU8Ol",
	"mH/VUtg1fKFFmXs7NM8fMLU2ULkFhjpWvLQHIIJbQZrdpAmBbCTbE53JHRcpMRkSLsrKEHwpUXFriGyp",
	"4nSTow4ITwjNc6I7F4QqJJVGNluLlSAm47r1EDhrigomC/7NhUyecU+4dh++SMVQhZx9mZHHDIk0Gare",
	"lzMcS7FFZZARI9fCmUNdYmz4FodBxFIkPK0UMsKFs14q+RVjQ6hgpKAmztxqLJU1IAWzyfYpzshaQABb",
	"mldoi5ZTw03FEKKr2XJ5fRNALkXaLi1uZovlr1cBtBlABHQTX10vIQDzzZZZczp/4CKlpVQIdV0HoOMM",
	"C+owYozbatD8XskSlWk4IAV+TCD6dACzLxEi0EZxkUIdHCCRqqAGIuDC/HJj/fgtXBhMUbk9zdJGyhyp",
	"gPqp7rbJja2GD8QCzxUyiIyq0K/YmugpJt5R1pDxAiL2Kf6oMIEIfpj3tJ/7r3r+XimpfChjct5R1rIS",
	"AsiQsobDf9+HTRDh6t0EqSsjUxSoqGVKVXFGEqkI0jgjLhvSpTOw3wd7VG0X2bgKD1Uco9Zv1KKQ7zuG",
	"fbActDV/VZEeBi9Jm8IuQ0GEJNQzfqDJWFY5Ixv05EafsaV4yrcoBtpYCysBk1U6sJZMV4nOAtWap8Ip",
	"eKABW4Ru822z5XvCp+INcTfwBD5qOgiX6zOBAqOG+tK3Xj5bSV5dL2+C4aKghYV59S7sF8Md4jOj+/AK",
	"Buk2OLuWQn2iHnglc4gSmmsMYIc8zQxEi9myDqAx3pkIb51BmiQ8huh6UddHTaAcSb/N4TXdPGCOsUHW",
	"sRLqaYGPEfIK6AtpC06bcjdd8n9X28pSVdD8AdUWlW8Q/3m7aZ0S75W0G9tgXTG6WMZ4xZLhRDIBYLv/",
	"5EuBWtN06tSoJ3/ytvv9rc2nE6wD6PvLo/t0ABRVYY3czu8ggIcdN3G2ofHz4Hgf0imjThI9EtUlF9Gp",
	"5iarYeh3kf5De7A+EuybrLxzFo4KP871NI+hw0EGU8BMO5yg0VGTGTP0t0obWZDRLtsFZcyd+HbcZIPm",
	"OYzuJKKL0WshG4fyBy2QyMR5m/DTA9v1vGMLf9nLwB4f3AZct/eAHxZ/Is1xYqS9JBhXroz278jzbC0+",
	"ln6Gct2nJzrpNaH9RTHMeXk9kfOJ/oagNAW5COQPA1KflZFplPpqzxrreqypLSrd0OUCOHVXmc87Lpjc",
	"NToeg2MHcP+ZcEY0FzG6gm8w5ULYYbnBPq6Ucm8CH0S7PKj/YKpei0f7Hkg45paseU6kyPcWWI3mGLf+",
	"nCZ+ZBmFZKiyHwxZnKI6mfp5cbcFDE5geZq8T7lI5MQ9eL9yKST2zmvfTiNpcJNbUz2YXsD99Xh7v7KD",
	"TIsnbK8sYrJEQUsOESxni5kdTEpqMkejeXNh6/mh+fWZs3ruQghH3bCUfmK3JHRuV6ydBR4HMZZU0QL9",
	"W/HTAbiNwnqDbqLp/cDx02F4q18AR2PeTxoDB1Tr8Bn3r5o/vjGfgsETen9OTqNX9vz8E/v4CXS9WJw3",
	"2eybT78Q6gBu3n568MqqA/j5EgNTI5ObXaqioGp/ZvA7mbRJzwCnun4iNDS1pIBkbMZq5CW0M0qKImys",
	"hHbkDxtAX6mzC9AF7PlWqRwimFveP9X/BgAA//+LJENjJBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
