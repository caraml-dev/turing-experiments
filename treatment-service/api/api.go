// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	externalRef0 "github.com/gojek/xp/common/api/schema"
	"github.com/pkg/errors"
)

// FetchTreatmentBadRequest defines model for FetchTreatmentBadRequest.
type FetchTreatmentBadRequest externalRef0.Error

// FetchTreatmentSuccess defines model for FetchTreatmentSuccess.
type FetchTreatmentSuccess struct {
	Data *externalRef0.SelectedTreatment `json:"data,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError externalRef0.Error

// FetchTreatmentRequestBody defines model for FetchTreatmentRequestBody.
type FetchTreatmentRequestBody struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// FetchTreatmentParams defines parameters for FetchTreatment.
type FetchTreatmentParams struct {
	PassKey string `json:"pass-key"`
}

// FetchTreatmentJSONRequestBody defines body for FetchTreatment for application/json ContentType.
type FetchTreatmentJSONRequestBody FetchTreatmentRequestBody

// Getter for additional properties for FetchTreatmentRequestBody. Returns the specified
// element and whether it was found
func (a FetchTreatmentRequestBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FetchTreatmentRequestBody
func (a *FetchTreatmentRequestBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FetchTreatmentRequestBody to handle AdditionalProperties
func (a *FetchTreatmentRequestBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FetchTreatmentRequestBody to handle AdditionalProperties
func (a FetchTreatmentRequestBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Fetch treatment for the given request parameters and project
	// (POST /projects/{project_id}/fetch-treatment)
	FetchTreatment(w http.ResponseWriter, r *http.Request, projectId int64, params FetchTreatmentParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FetchTreatment operation middleware
func (siw *ServerInterfaceWrapper) FetchTreatment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameter("simple", false, "project_id", chi.URLParam(r, "project_id"), &projectId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter project_id: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params FetchTreatmentParams

	headers := r.Header

	// ------------- Required header parameter "pass-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("pass-key")]; found {
		var PassKey string
		n := len(valueList)
		if n != 1 {
			http.Error(w, fmt.Sprintf("Expected one value for pass-key, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "pass-key", runtime.ParamLocationHeader, valueList[0], &PassKey)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter pass-key: %s", err), http.StatusBadRequest)
			return
		}

		params.PassKey = PassKey

	} else {
		http.Error(w, fmt.Sprintf("Header parameter pass-key is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchTreatment(w, r, projectId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/fetch-treatment", wrapper.FetchTreatment)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWT2/jthP9KsT8fkfKf+J0geqWxW4LH4oGdQ4FNkF2LI4kbiRSJSknXkPfvSApS3Lq",
	"pEkP7S0Z0W/ezLw35AEyXTdakXIW0gMY+qMl6z5qISkEfiKXlTeG0NWk3G/D573/mGnlSDn/JzZNJTN0",
	"Uqv5N6uVj9ET1k0VcbCqNlR4DDIhIMhmRjb+B5DClWL9adZTYFst9syW+lGqgrmSmFRN6xg9NWSkB2I7",
	"NBK3FVnOZM6wqpgdUjA0xFpLYnar1oq5UtpjBh7QDCqha/k9UGYPtGfShg9ftRFkEim+zthNSUy7ksyY",
	"KwBnWu3IOBLM6VsV4Mg2lDm5oymJTKtcFq0hwaQK6I3R3yhzDJVgNbqsDNFMGw+glfDFjiXO2K0CDjus",
	"WooNb5Uz+/tMC4IUNj8DhwqddK3/fzlbrS4uOVRaFcfQ4nK2WP245HCsClLAbba8WAGHxkhtpNvfY1Xp",
	"ODxInWmJgyWzkxndu31DkH74wMF993OyEucbqQpstCHouo6DzUqqMQxZCOlBsLo2uiHjehFpRb/mkH45",
	"QIQD64xUBXT8ALk2NTpIQSr34RL48YhUjgoy4Uwf2mpdESro7rrhmN76dkYiXjnSkIg1xIhvqj0n5Y8o",
	"ejW/Qcljif83lPsCQmC2x7r633y00DzG7fyzMdpEVqdC/4jiqHDgUBKK3g+/Xyc9n2T96YxBWqcLUmTQ",
	"q65tpWC5NowwK1kojA2VTfBH3s8aH5idNmTTZhlZ+05fK/15UOsvXs++/a+6O04k2tuX8FiSYkozjO6Z",
	"+DvTbSXYlqJRKFbs7VLIHamJz26Vt5MrW8s9khs6MSCgtbJQYRtM/OSbMBy+6o/8E/qo3sG7Hw+PrHFC",
	"V9oXiIJAh7H1xyz33srLi9UlnwYV1n7M60/JGEweiR4E7pMlTMrt5xzWU+/8OHijK0hzrCxxeCRZlA7S",
	"xWzVcejBB4jkKgBinssM0otF1z3bB83JFjjW8EYLbaiizJEYBArdedufDiuaYeyp7z32ne+X739uvLVX",
	"rcJqQ2ZHJu6Kf3MJHfOzSIBNDkqV6zNNuF6HqnNf8PE+HqXEwUlX+TLHZRDv1bE3V9drL2gyNkLultBx",
	"0A0pbCSksJotZl6gDboyzGXeT8vOD/1f91J080AhOZFxo+MS92ILadfiKISbCccGDdYU3x9fDiA9C58N",
	"BmWPeeD5bTId6d9eWf7OCvBRZpMEaG3yQPtX4Z8r5o5PnmX7yfxPhn7ycpu//Gx7fiteLBYvQ/bn5udv",
	"io7D5ft/Pbl4Ow4/vAXgnF/CpmnrGs3+Bdf/ZeOyUQHh/TWuA4eFFwXkpzBwx+Ep8Y+tglTSoyR+9Sf9",
	"QF/pcyAYCEe9taaCFOZe93fdnwEAAP//x2PLBXgLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
