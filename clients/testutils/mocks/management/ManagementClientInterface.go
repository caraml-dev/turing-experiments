// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	io "io"

	management "github.com/caraml-dev/xp/clients/management"

	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// CreateExperiment provides a mock function with given fields: ctx, projectId, body, reqEditors
func (_m *ClientInterface) CreateExperiment(ctx context.Context, projectId int64, body management.CreateExperimentJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, management.CreateExperimentJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, management.CreateExperimentJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExperimentWithBody provides a mock function with given fields: ctx, projectId, contentType, body, reqEditors
func (_m *ClientInterface) CreateExperimentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProjectSettings provides a mock function with given fields: ctx, projectId, body, reqEditors
func (_m *ClientInterface) CreateProjectSettings(ctx context.Context, projectId int64, body management.CreateProjectSettingsJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, management.CreateProjectSettingsJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, management.CreateProjectSettingsJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProjectSettingsWithBody provides a mock function with given fields: ctx, projectId, contentType, body, reqEditors
func (_m *ClientInterface) CreateProjectSettingsWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegment provides a mock function with given fields: ctx, projectId, body, reqEditors
func (_m *ClientInterface) CreateSegment(ctx context.Context, projectId int64, body management.CreateSegmentJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, management.CreateSegmentJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, management.CreateSegmentJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegmentWithBody provides a mock function with given fields: ctx, projectId, contentType, body, reqEditors
func (_m *ClientInterface) CreateSegmentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegmenter provides a mock function with given fields: ctx, projectId, body, reqEditors
func (_m *ClientInterface) CreateSegmenter(ctx context.Context, projectId int64, body management.CreateSegmenterJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, management.CreateSegmenterJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, management.CreateSegmenterJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegmenterWithBody provides a mock function with given fields: ctx, projectId, contentType, body, reqEditors
func (_m *ClientInterface) CreateSegmenterWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTreatment provides a mock function with given fields: ctx, projectId, body, reqEditors
func (_m *ClientInterface) CreateTreatment(ctx context.Context, projectId int64, body management.CreateTreatmentJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, management.CreateTreatmentJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, management.CreateTreatmentJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTreatmentWithBody provides a mock function with given fields: ctx, projectId, contentType, body, reqEditors
func (_m *ClientInterface) CreateTreatmentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegment provides a mock function with given fields: ctx, projectId, segmentId, reqEditors
func (_m *ClientInterface) DeleteSegment(ctx context.Context, projectId int64, segmentId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, segmentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, segmentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, segmentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegmenter provides a mock function with given fields: ctx, projectId, name, reqEditors
func (_m *ClientInterface) DeleteSegmenter(ctx context.Context, projectId int64, name string, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTreatment provides a mock function with given fields: ctx, projectId, treatmentId, reqEditors
func (_m *ClientInterface) DeleteTreatment(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, treatmentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, treatmentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, treatmentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableExperiment provides a mock function with given fields: ctx, projectId, experimentId, reqEditors
func (_m *ClientInterface) DisableExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, experimentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, experimentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, experimentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableExperiment provides a mock function with given fields: ctx, projectId, experimentId, reqEditors
func (_m *ClientInterface) EnableExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, experimentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, experimentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, experimentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperiment provides a mock function with given fields: ctx, projectId, experimentId, reqEditors
func (_m *ClientInterface) GetExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, experimentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, experimentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, experimentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperimentHistory provides a mock function with given fields: ctx, projectId, experimentId, version, reqEditors
func (_m *ClientInterface) GetExperimentHistory(ctx context.Context, projectId int64, experimentId int64, version int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, experimentId, version)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, experimentId, version, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, experimentId, version, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectExperimentVariables provides a mock function with given fields: ctx, projectId, reqEditors
func (_m *ClientInterface) GetProjectExperimentVariables(ctx context.Context, projectId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectSettings provides a mock function with given fields: ctx, projectId, reqEditors
func (_m *ClientInterface) GetProjectSettings(ctx context.Context, projectId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegment provides a mock function with given fields: ctx, projectId, segmentId, reqEditors
func (_m *ClientInterface) GetSegment(ctx context.Context, projectId int64, segmentId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, segmentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, segmentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, segmentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmentHistory provides a mock function with given fields: ctx, projectId, segmentId, version, reqEditors
func (_m *ClientInterface) GetSegmentHistory(ctx context.Context, projectId int64, segmentId int64, version int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, segmentId, version)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, segmentId, version, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, segmentId, version, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmenter provides a mock function with given fields: ctx, projectId, name, reqEditors
func (_m *ClientInterface) GetSegmenter(ctx context.Context, projectId int64, name string, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTreatment provides a mock function with given fields: ctx, projectId, treatmentId, reqEditors
func (_m *ClientInterface) GetTreatment(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, treatmentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, treatmentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, treatmentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTreatmentHistory provides a mock function with given fields: ctx, projectId, treatmentId, version, reqEditors
func (_m *ClientInterface) GetTreatmentHistory(ctx context.Context, projectId int64, treatmentId int64, version int64, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, treatmentId, version)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, treatmentId, version, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, treatmentId, version, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTreatmentServicePluginConfig provides a mock function with given fields: ctx, reqEditors
func (_m *ClientInterface) GetTreatmentServicePluginConfig(ctx context.Context, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExperimentHistory provides a mock function with given fields: ctx, projectId, experimentId, params, reqEditors
func (_m *ClientInterface) ListExperimentHistory(ctx context.Context, projectId int64, experimentId int64, params *management.ListExperimentHistoryParams, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, experimentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *management.ListExperimentHistoryParams, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, experimentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, *management.ListExperimentHistoryParams, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, experimentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExperiments provides a mock function with given fields: ctx, projectId, params, reqEditors
func (_m *ClientInterface) ListExperiments(ctx context.Context, projectId int64, params *management.ListExperimentsParams, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, *management.ListExperimentsParams, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *management.ListExperimentsParams, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, reqEditors
func (_m *ClientInterface) ListProjects(ctx context.Context, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSegmentHistory provides a mock function with given fields: ctx, projectId, segmentId, params, reqEditors
func (_m *ClientInterface) ListSegmentHistory(ctx context.Context, projectId int64, segmentId int64, params *management.ListSegmentHistoryParams, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, segmentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *management.ListSegmentHistoryParams, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, segmentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, *management.ListSegmentHistoryParams, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, segmentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSegmenters provides a mock function with given fields: ctx, projectId, params, reqEditors
func (_m *ClientInterface) ListSegmenters(ctx context.Context, projectId int64, params *management.ListSegmentersParams, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, *management.ListSegmentersParams, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *management.ListSegmentersParams, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSegments provides a mock function with given fields: ctx, projectId, params, reqEditors
func (_m *ClientInterface) ListSegments(ctx context.Context, projectId int64, params *management.ListSegmentsParams, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, *management.ListSegmentsParams, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *management.ListSegmentsParams, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTreatmentHistory provides a mock function with given fields: ctx, projectId, treatmentId, params, reqEditors
func (_m *ClientInterface) ListTreatmentHistory(ctx context.Context, projectId int64, treatmentId int64, params *management.ListTreatmentHistoryParams, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, treatmentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *management.ListTreatmentHistoryParams, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, treatmentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, *management.ListTreatmentHistoryParams, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, treatmentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTreatments provides a mock function with given fields: ctx, projectId, params, reqEditors
func (_m *ClientInterface) ListTreatments(ctx context.Context, projectId int64, params *management.ListTreatmentsParams, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, *management.ListTreatmentsParams, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *management.ListTreatmentsParams, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExperiment provides a mock function with given fields: ctx, projectId, experimentId, body, reqEditors
func (_m *ClientInterface) UpdateExperiment(ctx context.Context, projectId int64, experimentId int64, body management.UpdateExperimentJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, experimentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, management.UpdateExperimentJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, experimentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, management.UpdateExperimentJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, experimentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExperimentWithBody provides a mock function with given fields: ctx, projectId, experimentId, contentType, body, reqEditors
func (_m *ClientInterface) UpdateExperimentWithBody(ctx context.Context, projectId int64, experimentId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, experimentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, experimentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, experimentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectSettings provides a mock function with given fields: ctx, projectId, body, reqEditors
func (_m *ClientInterface) UpdateProjectSettings(ctx context.Context, projectId int64, body management.UpdateProjectSettingsJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, management.UpdateProjectSettingsJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, management.UpdateProjectSettingsJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectSettingsWithBody provides a mock function with given fields: ctx, projectId, contentType, body, reqEditors
func (_m *ClientInterface) UpdateProjectSettingsWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSegment provides a mock function with given fields: ctx, projectId, segmentId, body, reqEditors
func (_m *ClientInterface) UpdateSegment(ctx context.Context, projectId int64, segmentId int64, body management.UpdateSegmentJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, segmentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, management.UpdateSegmentJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, segmentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, management.UpdateSegmentJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, segmentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSegmentWithBody provides a mock function with given fields: ctx, projectId, segmentId, contentType, body, reqEditors
func (_m *ClientInterface) UpdateSegmentWithBody(ctx context.Context, projectId int64, segmentId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, segmentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, segmentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, segmentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSegmenter provides a mock function with given fields: ctx, projectId, name, body, reqEditors
func (_m *ClientInterface) UpdateSegmenter(ctx context.Context, projectId int64, name string, body management.UpdateSegmenterJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, management.UpdateSegmenterJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, management.UpdateSegmenterJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSegmenterWithBody provides a mock function with given fields: ctx, projectId, name, contentType, body, reqEditors
func (_m *ClientInterface) UpdateSegmenterWithBody(ctx context.Context, projectId int64, name string, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTreatment provides a mock function with given fields: ctx, projectId, treatmentId, body, reqEditors
func (_m *ClientInterface) UpdateTreatment(ctx context.Context, projectId int64, treatmentId int64, body management.UpdateTreatmentJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, treatmentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, management.UpdateTreatmentJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, treatmentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, management.UpdateTreatmentJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, treatmentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTreatmentWithBody provides a mock function with given fields: ctx, projectId, treatmentId, contentType, body, reqEditors
func (_m *ClientInterface) UpdateTreatmentWithBody(ctx context.Context, projectId int64, treatmentId int64, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectId, treatmentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, projectId, treatmentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, projectId, treatmentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateEntity provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientInterface) ValidateEntity(ctx context.Context, body management.ValidateEntityJSONRequestBody, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, management.ValidateEntityJSONRequestBody, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, management.ValidateEntityJSONRequestBody, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateEntityWithBody provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientInterface) ValidateEntityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...management.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...management.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...management.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientInterface(t mockConstructorTestingTNewClientInterface) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
