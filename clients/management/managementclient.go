// Package management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package management

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	externalRef0 "github.com/caraml-dev/xp/common/api/schema"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BadRequest defines model for BadRequest.
type BadRequest externalRef0.Error

// CreateExperimentSuccess defines model for CreateExperimentSuccess.
type CreateExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// CreateProjectSettingsSuccess defines model for CreateProjectSettingsSuccess.
type CreateProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// CreateSegmentSuccess defines model for CreateSegmentSuccess.
type CreateSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// CreateSegmenterSuccess defines model for CreateSegmenterSuccess.
type CreateSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// CreateTreatmentSuccess defines model for CreateTreatmentSuccess.
type CreateTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// DeleteSegmentSuccess defines model for DeleteSegmentSuccess.
type DeleteSegmentSuccess struct {
	Id *int `json:"id,omitempty"`
}

// DeleteSegmenterSuccess defines model for DeleteSegmenterSuccess.
type DeleteSegmenterSuccess struct {
	Name *string `json:"name,omitempty"`
}

// DeleteTreatmentSuccess defines model for DeleteTreatmentSuccess.
type DeleteTreatmentSuccess struct {
	Id *int `json:"id,omitempty"`
}

// GetExperimentHistorySuccess defines model for GetExperimentHistorySuccess.
type GetExperimentHistorySuccess struct {
	Data externalRef0.ExperimentHistory `json:"data"`
}

// GetExperimentSuccess defines model for GetExperimentSuccess.
type GetExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// GetProjectExperimentVariablesSuccess defines model for GetProjectExperimentVariablesSuccess.
type GetProjectExperimentVariablesSuccess struct {
	Data []string `json:"data"`
}

// GetProjectSettingsSuccess defines model for GetProjectSettingsSuccess.
type GetProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// GetSegmentHistorySuccess defines model for GetSegmentHistorySuccess.
type GetSegmentHistorySuccess struct {
	Data externalRef0.SegmentHistory `json:"data"`
}

// GetSegmentSuccess defines model for GetSegmentSuccess.
type GetSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// GetSegmenterSuccess defines model for GetSegmenterSuccess.
type GetSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// GetTreatmentHistorySuccess defines model for GetTreatmentHistorySuccess.
type GetTreatmentHistorySuccess struct {
	Data externalRef0.TreatmentHistory `json:"data"`
}

// GetTreatmentServiceConfigSuccess defines model for GetTreatmentServiceConfigSuccess.
type GetTreatmentServiceConfigSuccess struct {
	Data externalRef0.TreatmentServiceConfig `json:"data"`
}

// GetTreatmentSuccess defines model for GetTreatmentSuccess.
type GetTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError externalRef0.Error

// ListExperimentHistorySuccess defines model for ListExperimentHistorySuccess.
type ListExperimentHistorySuccess struct {
	Data   []externalRef0.ExperimentHistory `json:"data"`
	Paging *externalRef0.Paging             `json:"paging,omitempty"`
}

// ListExperimentsSuccess defines model for ListExperimentsSuccess.
type ListExperimentsSuccess struct {
	Data   []externalRef0.Experiment `json:"data"`
	Paging *externalRef0.Paging      `json:"paging,omitempty"`
}

// ListProjectsSuccess defines model for ListProjectsSuccess.
type ListProjectsSuccess struct {
	Data []externalRef0.Project `json:"data"`
}

// ListSegmentHistorySuccess defines model for ListSegmentHistorySuccess.
type ListSegmentHistorySuccess struct {
	Data   []externalRef0.SegmentHistory `json:"data"`
	Paging *externalRef0.Paging          `json:"paging,omitempty"`
}

// ListSegmentersSuccess defines model for ListSegmentersSuccess.
type ListSegmentersSuccess struct {
	Data []externalRef0.Segmenter `json:"data"`
}

// ListSegmentsSuccess defines model for ListSegmentsSuccess.
type ListSegmentsSuccess struct {
	Data   []externalRef0.Segment `json:"data"`
	Paging *externalRef0.Paging   `json:"paging,omitempty"`
}

// ListTreatmentHistorySuccess defines model for ListTreatmentHistorySuccess.
type ListTreatmentHistorySuccess struct {
	Data   []externalRef0.TreatmentHistory `json:"data"`
	Paging *externalRef0.Paging            `json:"paging,omitempty"`
}

// ListTreatmentsSuccess defines model for ListTreatmentsSuccess.
type ListTreatmentsSuccess struct {
	Data   []externalRef0.Treatment `json:"data"`
	Paging *externalRef0.Paging     `json:"paging,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound externalRef0.Error

// UpdateExperimentSuccess defines model for UpdateExperimentSuccess.
type UpdateExperimentSuccess struct {
	Data externalRef0.Experiment `json:"data"`
}

// UpdateProjectSettingsSuccess defines model for UpdateProjectSettingsSuccess.
type UpdateProjectSettingsSuccess struct {
	Data externalRef0.ProjectSettings `json:"data"`
}

// UpdateSegmentSuccess defines model for UpdateSegmentSuccess.
type UpdateSegmentSuccess struct {
	Data externalRef0.Segment `json:"data"`
}

// UpdateSegmenterSuccess defines model for UpdateSegmenterSuccess.
type UpdateSegmenterSuccess struct {
	Data externalRef0.Segmenter `json:"data"`
}

// UpdateTreatmentSuccess defines model for UpdateTreatmentSuccess.
type UpdateTreatmentSuccess struct {
	Data externalRef0.Treatment `json:"data"`
}

// CreateExperimentRequestBody defines model for CreateExperimentRequestBody.
type CreateExperimentRequestBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Name        string                             `json:"name"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// CreateProjectSettingsRequestBody defines model for CreateProjectSettingsRequestBody.
type CreateProjectSettingsRequestBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// CreateSegmentRequestBody defines model for CreateSegmentRequestBody.
type CreateSegmentRequestBody struct {
	Name      string                         `json:"name"`
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// CreateSegmenterRequestBody defines model for CreateSegmenterRequestBody.
type CreateSegmenterRequestBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Name        string                         `json:"name"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
	Type        externalRef0.SegmenterType     `json:"type"`
}

// CreateTreatmentRequestBody defines model for CreateTreatmentRequestBody.
type CreateTreatmentRequestBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	Name          string                 `json:"name"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// UpdateExperimentRequestBody defines model for UpdateExperimentRequestBody.
type UpdateExperimentRequestBody struct {
	Description *string                            `json:"description"`
	EndTime     time.Time                          `json:"end_time"`
	Interval    *int32                             `json:"interval"`
	Segment     externalRef0.ExperimentSegment     `json:"segment"`
	StartTime   time.Time                          `json:"start_time"`
	Status      externalRef0.ExperimentStatus      `json:"status"`
	Tier        *externalRef0.ExperimentTier       `json:"tier,omitempty"`
	Treatments  []externalRef0.ExperimentTreatment `json:"treatments"`
	Type        externalRef0.ExperimentType        `json:"type"`
	UpdatedBy   *string                            `json:"updated_by,omitempty"`
}

// UpdateProjectSettingsRequestBody defines model for UpdateProjectSettingsRequestBody.
type UpdateProjectSettingsRequestBody struct {
	EnableS2idClustering *bool                          `json:"enable_s2id_clustering,omitempty"`
	RandomizationKey     string                         `json:"randomization_key"`
	Segmenters           externalRef0.ProjectSegmenters `json:"segmenters"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// UpdateSegmentRequestBody defines model for UpdateSegmentRequestBody.
type UpdateSegmentRequestBody struct {
	Segment   externalRef0.ExperimentSegment `json:"segment"`
	UpdatedBy *string                        `json:"updated_by,omitempty"`
}

// UpdateSegmenterRequestBody defines model for UpdateSegmenterRequestBody.
type UpdateSegmenterRequestBody struct {
	Constraints *[]externalRef0.Constraint     `json:"constraints,omitempty"`
	Description *string                        `json:"description,omitempty"`
	MultiValued bool                           `json:"multi_valued"`
	Options     *externalRef0.SegmenterOptions `json:"options,omitempty"`
	Required    bool                           `json:"required"`
}

// UpdateTreatmentRequestBody defines model for UpdateTreatmentRequestBody.
type UpdateTreatmentRequestBody struct {
	Configuration map[string]interface{} `json:"configuration"`
	UpdatedBy     *string                `json:"updated_by,omitempty"`
}

// ValidateEntityRequestBody defines model for ValidateEntityRequestBody.
type ValidateEntityRequestBody struct {
	Data map[string]interface{} `json:"data"`

	// Object containing information to define a valid treatment schema
	TreatmentSchema *externalRef0.TreatmentSchema `json:"treatment_schema,omitempty"`
	ValidationUrl   *string                       `json:"validation_url,omitempty"`
}

// ListExperimentsParams defines parameters for ListExperiments.
type ListExperimentsParams struct {
	Status *externalRef0.ExperimentStatus `json:"status,omitempty"`

	// status_friendly is a combination of the status field, in conjunction with the duration,
	// that produces a user-friendly classification of the experiment statuses. When this parameter
	// is supplied, the status, start_time and end_time filters can also be set. However, the final
	// result would be an intersection of the application of each of these filters.
	StatusFriendly *[]externalRef0.ExperimentStatusFriendly `json:"status_friendly,omitempty"`

	// Used together with the start_time, to filter experiments that are at least partially running in the input range.
	EndTime   *time.Time                   `json:"end_time,omitempty"`
	Tier      *externalRef0.ExperimentTier `json:"tier,omitempty"`
	Type      *externalRef0.ExperimentType `json:"type,omitempty"`
	Name      *string                      `json:"name,omitempty"`
	UpdatedBy *string                      `json:"updated_by,omitempty"`

	// Search experiment name and description for a partial match of the search text
	Search *string `json:"search,omitempty"`

	// Result page number. It defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. It defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`

	// Used together with the end_time, to filter experiments that are at least partially running in the input range.
	StartTime *time.Time              `json:"start_time,omitempty"`
	Segment   *map[string]interface{} `json:"segment,omitempty"`

	// controls whether or not weak segmenter matches (experiments where the segmenter is optional) should be returned
	IncludeWeakMatch *bool `json:"include_weak_match,omitempty"`

	// A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.ExperimentField `json:"fields,omitempty"`
}

// ListExperimentHistoryParams defines parameters for ListExperimentHistory.
type ListExperimentHistoryParams struct {

	// Result page number. It defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. It defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`
}

// ListSegmentersParams defines parameters for ListSegmenters.
type ListSegmentersParams struct {
	Scope  *externalRef0.SegmenterScope  `json:"scope,omitempty"`
	Status *externalRef0.SegmenterStatus `json:"status,omitempty"`

	// Search treatment name for a partial match of the search text
	Search *string `json:"search,omitempty"`
}

// ListSegmentsParams defines parameters for ListSegments.
type ListSegmentsParams struct {
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Search segment name for a partial match of the search text
	Search *string `json:"search,omitempty"`

	// Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`

	// A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.SegmentField `json:"fields,omitempty"`
}

// ListSegmentHistoryParams defines parameters for ListSegmentHistory.
type ListSegmentHistoryParams struct {

	// Result page number. It defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. It defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`
}

// ListTreatmentsParams defines parameters for ListTreatments.
type ListTreatmentsParams struct {
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Search treatment name for a partial match of the search text
	Search *string `json:"search,omitempty"`

	// Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`

	// A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.
	// Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.
	Fields *[]externalRef0.TreatmentField `json:"fields,omitempty"`
}

// ListTreatmentHistoryParams defines parameters for ListTreatmentHistory.
type ListTreatmentHistoryParams struct {

	// Result page number. If empty, it defaults to 1.
	Page *int32 `json:"page,omitempty"`

	// Number of items on each page. If empty, it defaults to 10.
	PageSize *int32 `json:"page_size,omitempty"`
}

// CreateExperimentJSONRequestBody defines body for CreateExperiment for application/json ContentType.
type CreateExperimentJSONRequestBody CreateExperimentRequestBody

// UpdateExperimentJSONRequestBody defines body for UpdateExperiment for application/json ContentType.
type UpdateExperimentJSONRequestBody UpdateExperimentRequestBody

// CreateSegmenterJSONRequestBody defines body for CreateSegmenter for application/json ContentType.
type CreateSegmenterJSONRequestBody CreateSegmenterRequestBody

// UpdateSegmenterJSONRequestBody defines body for UpdateSegmenter for application/json ContentType.
type UpdateSegmenterJSONRequestBody UpdateSegmenterRequestBody

// CreateSegmentJSONRequestBody defines body for CreateSegment for application/json ContentType.
type CreateSegmentJSONRequestBody CreateSegmentRequestBody

// UpdateSegmentJSONRequestBody defines body for UpdateSegment for application/json ContentType.
type UpdateSegmentJSONRequestBody UpdateSegmentRequestBody

// CreateProjectSettingsJSONRequestBody defines body for CreateProjectSettings for application/json ContentType.
type CreateProjectSettingsJSONRequestBody CreateProjectSettingsRequestBody

// UpdateProjectSettingsJSONRequestBody defines body for UpdateProjectSettings for application/json ContentType.
type UpdateProjectSettingsJSONRequestBody UpdateProjectSettingsRequestBody

// CreateTreatmentJSONRequestBody defines body for CreateTreatment for application/json ContentType.
type CreateTreatmentJSONRequestBody CreateTreatmentRequestBody

// UpdateTreatmentJSONRequestBody defines body for UpdateTreatment for application/json ContentType.
type UpdateTreatmentJSONRequestBody UpdateTreatmentRequestBody

// ValidateEntityJSONRequestBody defines body for ValidateEntity for application/json ContentType.
type ValidateEntityJSONRequestBody ValidateEntityRequestBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListProjects request
	ListProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectExperimentVariables request
	GetProjectExperimentVariables(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperiments request
	ListExperiments(ctx context.Context, projectId int64, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateExperiment request  with any body
	CreateExperimentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateExperiment(ctx context.Context, projectId int64, body CreateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperiment request
	GetExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateExperiment request  with any body
	UpdateExperimentWithBody(ctx context.Context, projectId int64, experimentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateExperiment(ctx context.Context, projectId int64, experimentId int64, body UpdateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableExperiment request
	DisableExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableExperiment request
	EnableExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperimentHistory request
	ListExperimentHistory(ctx context.Context, projectId int64, experimentId int64, params *ListExperimentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentHistory request
	GetExperimentHistory(ctx context.Context, projectId int64, experimentId int64, version int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSegmenters request
	ListSegmenters(ctx context.Context, projectId int64, params *ListSegmentersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSegmenter request  with any body
	CreateSegmenterWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSegmenter(ctx context.Context, projectId int64, body CreateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSegmenter request
	DeleteSegmenter(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmenter request
	GetSegmenter(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSegmenter request  with any body
	UpdateSegmenterWithBody(ctx context.Context, projectId int64, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSegmenter(ctx context.Context, projectId int64, name string, body UpdateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSegments request
	ListSegments(ctx context.Context, projectId int64, params *ListSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSegment request  with any body
	CreateSegmentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSegment(ctx context.Context, projectId int64, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSegment request
	DeleteSegment(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegment request
	GetSegment(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSegment request  with any body
	UpdateSegmentWithBody(ctx context.Context, projectId int64, segmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSegment(ctx context.Context, projectId int64, segmentId int64, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSegmentHistory request
	ListSegmentHistory(ctx context.Context, projectId int64, segmentId int64, params *ListSegmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentHistory request
	GetSegmentHistory(ctx context.Context, projectId int64, segmentId int64, version int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectSettings request
	GetProjectSettings(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectSettings request  with any body
	CreateProjectSettingsWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectSettings(ctx context.Context, projectId int64, body CreateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProjectSettings request  with any body
	UpdateProjectSettingsWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProjectSettings(ctx context.Context, projectId int64, body UpdateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTreatments request
	ListTreatments(ctx context.Context, projectId int64, params *ListTreatmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTreatment request  with any body
	CreateTreatmentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTreatment(ctx context.Context, projectId int64, body CreateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTreatment request
	DeleteTreatment(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTreatment request
	GetTreatment(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTreatment request  with any body
	UpdateTreatmentWithBody(ctx context.Context, projectId int64, treatmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTreatment(ctx context.Context, projectId int64, treatmentId int64, body UpdateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTreatmentHistory request
	ListTreatmentHistory(ctx context.Context, projectId int64, treatmentId int64, params *ListTreatmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTreatmentHistory request
	GetTreatmentHistory(ctx context.Context, projectId int64, treatmentId int64, version int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTreatmentServiceConfig request
	GetTreatmentServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateEntity request  with any body
	ValidateEntityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateEntity(ctx context.Context, body ValidateEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectExperimentVariables(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectExperimentVariablesRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperiments(ctx context.Context, projectId int64, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperimentsRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExperimentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExperimentRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExperiment(ctx context.Context, projectId int64, body CreateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExperimentRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentRequest(c.Server, projectId, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExperimentWithBody(ctx context.Context, projectId int64, experimentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExperimentRequestWithBody(c.Server, projectId, experimentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExperiment(ctx context.Context, projectId int64, experimentId int64, body UpdateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExperimentRequest(c.Server, projectId, experimentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableExperimentRequest(c.Server, projectId, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableExperiment(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableExperimentRequest(c.Server, projectId, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperimentHistory(ctx context.Context, projectId int64, experimentId int64, params *ListExperimentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperimentHistoryRequest(c.Server, projectId, experimentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentHistory(ctx context.Context, projectId int64, experimentId int64, version int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentHistoryRequest(c.Server, projectId, experimentId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSegmenters(ctx context.Context, projectId int64, params *ListSegmentersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSegmentersRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegmenterWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmenterRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegmenter(ctx context.Context, projectId int64, body CreateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmenterRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSegmenter(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSegmenterRequest(c.Server, projectId, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmenter(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmenterRequest(c.Server, projectId, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegmenterWithBody(ctx context.Context, projectId int64, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmenterRequestWithBody(c.Server, projectId, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegmenter(ctx context.Context, projectId int64, name string, body UpdateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmenterRequest(c.Server, projectId, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSegments(ctx context.Context, projectId int64, params *ListSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSegmentsRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegmentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmentRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegment(ctx context.Context, projectId int64, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmentRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSegment(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSegmentRequest(c.Server, projectId, segmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegment(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentRequest(c.Server, projectId, segmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegmentWithBody(ctx context.Context, projectId int64, segmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmentRequestWithBody(c.Server, projectId, segmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegment(ctx context.Context, projectId int64, segmentId int64, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmentRequest(c.Server, projectId, segmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSegmentHistory(ctx context.Context, projectId int64, segmentId int64, params *ListSegmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSegmentHistoryRequest(c.Server, projectId, segmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentHistory(ctx context.Context, projectId int64, segmentId int64, version int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentHistoryRequest(c.Server, projectId, segmentId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectSettings(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectSettingsRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectSettingsWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectSettingsRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectSettings(ctx context.Context, projectId int64, body CreateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectSettingsRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectSettingsWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectSettingsRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectSettings(ctx context.Context, projectId int64, body UpdateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectSettingsRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTreatments(ctx context.Context, projectId int64, params *ListTreatmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTreatmentsRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTreatmentWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTreatmentRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTreatment(ctx context.Context, projectId int64, body CreateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTreatmentRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTreatment(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTreatmentRequest(c.Server, projectId, treatmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTreatment(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTreatmentRequest(c.Server, projectId, treatmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTreatmentWithBody(ctx context.Context, projectId int64, treatmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTreatmentRequestWithBody(c.Server, projectId, treatmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTreatment(ctx context.Context, projectId int64, treatmentId int64, body UpdateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTreatmentRequest(c.Server, projectId, treatmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTreatmentHistory(ctx context.Context, projectId int64, treatmentId int64, params *ListTreatmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTreatmentHistoryRequest(c.Server, projectId, treatmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTreatmentHistory(ctx context.Context, projectId int64, treatmentId int64, version int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTreatmentHistoryRequest(c.Server, projectId, treatmentId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTreatmentServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTreatmentServiceConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateEntityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateEntityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateEntity(ctx context.Context, body ValidateEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateEntityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListProjectsRequest generates requests for ListProjects
func NewListProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectExperimentVariablesRequest generates requests for GetProjectExperimentVariables
func NewGetProjectExperimentVariablesRequest(server string, projectId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiment-variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExperimentsRequest generates requests for ListExperiments
func NewListExperimentsRequest(server string, projectId int64, params *ListExperimentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusFriendly != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_friendly", runtime.ParamLocationQuery, *params.StatusFriendly); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tier", runtime.ParamLocationQuery, *params.Tier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Segment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "segment", runtime.ParamLocationQuery, *params.Segment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeWeakMatch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_weak_match", runtime.ParamLocationQuery, *params.IncludeWeakMatch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateExperimentRequest calls the generic CreateExperiment builder with application/json body
func NewCreateExperimentRequest(server string, projectId int64, body CreateExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateExperimentRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateExperimentRequestWithBody generates requests for CreateExperiment with any type of body
func NewCreateExperimentRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExperimentRequest generates requests for GetExperiment
func NewGetExperimentRequest(server string, projectId int64, experimentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateExperimentRequest calls the generic UpdateExperiment builder with application/json body
func NewUpdateExperimentRequest(server string, projectId int64, experimentId int64, body UpdateExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateExperimentRequestWithBody(server, projectId, experimentId, "application/json", bodyReader)
}

// NewUpdateExperimentRequestWithBody generates requests for UpdateExperiment with any type of body
func NewUpdateExperimentRequestWithBody(server string, projectId int64, experimentId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDisableExperimentRequest generates requests for DisableExperiment
func NewDisableExperimentRequest(server string, projectId int64, experimentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments/%s/disable", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnableExperimentRequest generates requests for EnableExperiment
func NewEnableExperimentRequest(server string, projectId int64, experimentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments/%s/enable", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExperimentHistoryRequest generates requests for ListExperimentHistory
func NewListExperimentHistoryRequest(server string, projectId int64, experimentId int64, params *ListExperimentHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments/%s/history", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExperimentHistoryRequest generates requests for GetExperimentHistory
func NewGetExperimentHistoryRequest(server string, projectId int64, experimentId int64, version int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experiment_id", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/experiments/%s/history/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSegmentersRequest generates requests for ListSegmenters
func NewListSegmentersRequest(server string, projectId int64, params *ListSegmentersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segmenters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSegmenterRequest calls the generic CreateSegmenter builder with application/json body
func NewCreateSegmenterRequest(server string, projectId int64, body CreateSegmenterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSegmenterRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateSegmenterRequestWithBody generates requests for CreateSegmenter with any type of body
func NewCreateSegmenterRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segmenters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSegmenterRequest generates requests for DeleteSegmenter
func NewDeleteSegmenterRequest(server string, projectId int64, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segmenters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmenterRequest generates requests for GetSegmenter
func NewGetSegmenterRequest(server string, projectId int64, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segmenters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSegmenterRequest calls the generic UpdateSegmenter builder with application/json body
func NewUpdateSegmenterRequest(server string, projectId int64, name string, body UpdateSegmenterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSegmenterRequestWithBody(server, projectId, name, "application/json", bodyReader)
}

// NewUpdateSegmenterRequestWithBody generates requests for UpdateSegmenter with any type of body
func NewUpdateSegmenterRequestWithBody(server string, projectId int64, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segmenters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSegmentsRequest generates requests for ListSegments
func NewListSegmentsRequest(server string, projectId int64, params *ListSegmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.UpdatedBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSegmentRequest calls the generic CreateSegment builder with application/json body
func NewCreateSegmentRequest(server string, projectId int64, body CreateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSegmentRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateSegmentRequestWithBody generates requests for CreateSegment with any type of body
func NewCreateSegmentRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSegmentRequest generates requests for DeleteSegment
func NewDeleteSegmentRequest(server string, projectId int64, segmentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, segmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentRequest generates requests for GetSegment
func NewGetSegmentRequest(server string, projectId int64, segmentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, segmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSegmentRequest calls the generic UpdateSegment builder with application/json body
func NewUpdateSegmentRequest(server string, projectId int64, segmentId int64, body UpdateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSegmentRequestWithBody(server, projectId, segmentId, "application/json", bodyReader)
}

// NewUpdateSegmentRequestWithBody generates requests for UpdateSegment with any type of body
func NewUpdateSegmentRequestWithBody(server string, projectId int64, segmentId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, segmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSegmentHistoryRequest generates requests for ListSegmentHistory
func NewListSegmentHistoryRequest(server string, projectId int64, segmentId int64, params *ListSegmentHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, segmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segments/%s/history", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentHistoryRequest generates requests for GetSegmentHistory
func NewGetSegmentHistoryRequest(server string, projectId int64, segmentId int64, version int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "segment_id", runtime.ParamLocationPath, segmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/segments/%s/history/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectSettingsRequest generates requests for GetProjectSettings
func NewGetProjectSettingsRequest(server string, projectId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectSettingsRequest calls the generic CreateProjectSettings builder with application/json body
func NewCreateProjectSettingsRequest(server string, projectId int64, body CreateProjectSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectSettingsRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateProjectSettingsRequestWithBody generates requests for CreateProjectSettings with any type of body
func NewCreateProjectSettingsRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateProjectSettingsRequest calls the generic UpdateProjectSettings builder with application/json body
func NewUpdateProjectSettingsRequest(server string, projectId int64, body UpdateProjectSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectSettingsRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewUpdateProjectSettingsRequestWithBody generates requests for UpdateProjectSettings with any type of body
func NewUpdateProjectSettingsRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTreatmentsRequest generates requests for ListTreatments
func NewListTreatmentsRequest(server string, projectId int64, params *ListTreatmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/treatments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.UpdatedBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTreatmentRequest calls the generic CreateTreatment builder with application/json body
func NewCreateTreatmentRequest(server string, projectId int64, body CreateTreatmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTreatmentRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateTreatmentRequestWithBody generates requests for CreateTreatment with any type of body
func NewCreateTreatmentRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/treatments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTreatmentRequest generates requests for DeleteTreatment
func NewDeleteTreatmentRequest(server string, projectId int64, treatmentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, treatmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/treatments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTreatmentRequest generates requests for GetTreatment
func NewGetTreatmentRequest(server string, projectId int64, treatmentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, treatmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/treatments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTreatmentRequest calls the generic UpdateTreatment builder with application/json body
func NewUpdateTreatmentRequest(server string, projectId int64, treatmentId int64, body UpdateTreatmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTreatmentRequestWithBody(server, projectId, treatmentId, "application/json", bodyReader)
}

// NewUpdateTreatmentRequestWithBody generates requests for UpdateTreatment with any type of body
func NewUpdateTreatmentRequestWithBody(server string, projectId int64, treatmentId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, treatmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/treatments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTreatmentHistoryRequest generates requests for ListTreatmentHistory
func NewListTreatmentHistoryRequest(server string, projectId int64, treatmentId int64, params *ListTreatmentHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, treatmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/treatments/%s/history", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTreatmentHistoryRequest generates requests for GetTreatmentHistory
func NewGetTreatmentHistoryRequest(server string, projectId int64, treatmentId int64, version int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "treatment_id", runtime.ParamLocationPath, treatmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/treatments/%s/history/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTreatmentServiceConfigRequest generates requests for GetTreatmentServiceConfig
func NewGetTreatmentServiceConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment-service-config")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateEntityRequest calls the generic ValidateEntity builder with application/json body
func NewValidateEntityRequest(server string, body ValidateEntityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateEntityRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateEntityRequestWithBody generates requests for ValidateEntity with any type of body
func NewValidateEntityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/validate")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListProjects request
	ListProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProjectsResponse, error)

	// GetProjectExperimentVariables request
	GetProjectExperimentVariablesWithResponse(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*GetProjectExperimentVariablesResponse, error)

	// ListExperiments request
	ListExperimentsWithResponse(ctx context.Context, projectId int64, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*ListExperimentsResponse, error)

	// CreateExperiment request  with any body
	CreateExperimentWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExperimentResponse, error)

	CreateExperimentWithResponse(ctx context.Context, projectId int64, body CreateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExperimentResponse, error)

	// GetExperiment request
	GetExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*GetExperimentResponse, error)

	// UpdateExperiment request  with any body
	UpdateExperimentWithBodyWithResponse(ctx context.Context, projectId int64, experimentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExperimentResponse, error)

	UpdateExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, body UpdateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExperimentResponse, error)

	// DisableExperiment request
	DisableExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*DisableExperimentResponse, error)

	// EnableExperiment request
	EnableExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*EnableExperimentResponse, error)

	// ListExperimentHistory request
	ListExperimentHistoryWithResponse(ctx context.Context, projectId int64, experimentId int64, params *ListExperimentHistoryParams, reqEditors ...RequestEditorFn) (*ListExperimentHistoryResponse, error)

	// GetExperimentHistory request
	GetExperimentHistoryWithResponse(ctx context.Context, projectId int64, experimentId int64, version int64, reqEditors ...RequestEditorFn) (*GetExperimentHistoryResponse, error)

	// ListSegmenters request
	ListSegmentersWithResponse(ctx context.Context, projectId int64, params *ListSegmentersParams, reqEditors ...RequestEditorFn) (*ListSegmentersResponse, error)

	// CreateSegmenter request  with any body
	CreateSegmenterWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmenterResponse, error)

	CreateSegmenterWithResponse(ctx context.Context, projectId int64, body CreateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmenterResponse, error)

	// DeleteSegmenter request
	DeleteSegmenterWithResponse(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*DeleteSegmenterResponse, error)

	// GetSegmenter request
	GetSegmenterWithResponse(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*GetSegmenterResponse, error)

	// UpdateSegmenter request  with any body
	UpdateSegmenterWithBodyWithResponse(ctx context.Context, projectId int64, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmenterResponse, error)

	UpdateSegmenterWithResponse(ctx context.Context, projectId int64, name string, body UpdateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmenterResponse, error)

	// ListSegments request
	ListSegmentsWithResponse(ctx context.Context, projectId int64, params *ListSegmentsParams, reqEditors ...RequestEditorFn) (*ListSegmentsResponse, error)

	// CreateSegment request  with any body
	CreateSegmentWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error)

	CreateSegmentWithResponse(ctx context.Context, projectId int64, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error)

	// DeleteSegment request
	DeleteSegmentWithResponse(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*DeleteSegmentResponse, error)

	// GetSegment request
	GetSegmentWithResponse(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error)

	// UpdateSegment request  with any body
	UpdateSegmentWithBodyWithResponse(ctx context.Context, projectId int64, segmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error)

	UpdateSegmentWithResponse(ctx context.Context, projectId int64, segmentId int64, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error)

	// ListSegmentHistory request
	ListSegmentHistoryWithResponse(ctx context.Context, projectId int64, segmentId int64, params *ListSegmentHistoryParams, reqEditors ...RequestEditorFn) (*ListSegmentHistoryResponse, error)

	// GetSegmentHistory request
	GetSegmentHistoryWithResponse(ctx context.Context, projectId int64, segmentId int64, version int64, reqEditors ...RequestEditorFn) (*GetSegmentHistoryResponse, error)

	// GetProjectSettings request
	GetProjectSettingsWithResponse(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*GetProjectSettingsResponse, error)

	// CreateProjectSettings request  with any body
	CreateProjectSettingsWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectSettingsResponse, error)

	CreateProjectSettingsWithResponse(ctx context.Context, projectId int64, body CreateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectSettingsResponse, error)

	// UpdateProjectSettings request  with any body
	UpdateProjectSettingsWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectSettingsResponse, error)

	UpdateProjectSettingsWithResponse(ctx context.Context, projectId int64, body UpdateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectSettingsResponse, error)

	// ListTreatments request
	ListTreatmentsWithResponse(ctx context.Context, projectId int64, params *ListTreatmentsParams, reqEditors ...RequestEditorFn) (*ListTreatmentsResponse, error)

	// CreateTreatment request  with any body
	CreateTreatmentWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTreatmentResponse, error)

	CreateTreatmentWithResponse(ctx context.Context, projectId int64, body CreateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTreatmentResponse, error)

	// DeleteTreatment request
	DeleteTreatmentWithResponse(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*DeleteTreatmentResponse, error)

	// GetTreatment request
	GetTreatmentWithResponse(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*GetTreatmentResponse, error)

	// UpdateTreatment request  with any body
	UpdateTreatmentWithBodyWithResponse(ctx context.Context, projectId int64, treatmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTreatmentResponse, error)

	UpdateTreatmentWithResponse(ctx context.Context, projectId int64, treatmentId int64, body UpdateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTreatmentResponse, error)

	// ListTreatmentHistory request
	ListTreatmentHistoryWithResponse(ctx context.Context, projectId int64, treatmentId int64, params *ListTreatmentHistoryParams, reqEditors ...RequestEditorFn) (*ListTreatmentHistoryResponse, error)

	// GetTreatmentHistory request
	GetTreatmentHistoryWithResponse(ctx context.Context, projectId int64, treatmentId int64, version int64, reqEditors ...RequestEditorFn) (*GetTreatmentHistoryResponse, error)

	// GetTreatmentServiceConfig request
	GetTreatmentServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTreatmentServiceConfigResponse, error)

	// ValidateEntity request  with any body
	ValidateEntityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateEntityResponse, error)

	ValidateEntityWithResponse(ctx context.Context, body ValidateEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateEntityResponse, error)
}

type ListProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []externalRef0.Project `json:"data"`
	}
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectExperimentVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []string `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetProjectExperimentVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectExperimentVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   []externalRef0.Experiment `json:"data"`
		Paging *externalRef0.Paging      `json:"paging,omitempty"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Experiment `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r CreateExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Experiment `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Experiment `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r UpdateExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *externalRef0.Error
	JSON500      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r DisableExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *externalRef0.Error
	JSON500      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r EnableExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperimentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   []externalRef0.ExperimentHistory `json:"data"`
		Paging *externalRef0.Paging             `json:"paging,omitempty"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListExperimentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperimentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.ExperimentHistory `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetExperimentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSegmentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []externalRef0.Segmenter `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListSegmentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSegmentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSegmenterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Segmenter `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r CreateSegmenterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSegmenterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSegmenterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Name *string `json:"name,omitempty"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r DeleteSegmenterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSegmenterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmenterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Segmenter `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetSegmenterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmenterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSegmenterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Segmenter `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r UpdateSegmenterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSegmenterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   []externalRef0.Segment `json:"data"`
		Paging *externalRef0.Paging   `json:"paging,omitempty"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Segment `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r CreateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id *int `json:"id,omitempty"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r DeleteSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Segment `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Segment `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r UpdateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSegmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   []externalRef0.SegmentHistory `json:"data"`
		Paging *externalRef0.Paging          `json:"paging,omitempty"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListSegmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSegmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.SegmentHistory `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetSegmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.ProjectSettings `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetProjectSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.ProjectSettings `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r CreateProjectSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.ProjectSettings `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r UpdateProjectSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTreatmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   []externalRef0.Treatment `json:"data"`
		Paging *externalRef0.Paging     `json:"paging,omitempty"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListTreatmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTreatmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTreatmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Treatment `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r CreateTreatmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTreatmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTreatmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id *int `json:"id,omitempty"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r DeleteTreatmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTreatmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTreatmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Treatment `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetTreatmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTreatmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTreatmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.Treatment `json:"data"`
	}
	JSON400 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r UpdateTreatmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTreatmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTreatmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   []externalRef0.TreatmentHistory `json:"data"`
		Paging *externalRef0.Paging            `json:"paging,omitempty"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ListTreatmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTreatmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTreatmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.TreatmentHistory `json:"data"`
	}
	JSON404 *externalRef0.Error
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetTreatmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTreatmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTreatmentServiceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data externalRef0.TreatmentServiceConfig `json:"data"`
	}
	JSON500 *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r GetTreatmentServiceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTreatmentServiceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateEntityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.Error
	JSON500      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ValidateEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListProjectsWithResponse request returning *ListProjectsResponse
func (c *ClientWithResponses) ListProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProjectsResponse, error) {
	rsp, err := c.ListProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectsResponse(rsp)
}

// GetProjectExperimentVariablesWithResponse request returning *GetProjectExperimentVariablesResponse
func (c *ClientWithResponses) GetProjectExperimentVariablesWithResponse(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*GetProjectExperimentVariablesResponse, error) {
	rsp, err := c.GetProjectExperimentVariables(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectExperimentVariablesResponse(rsp)
}

// ListExperimentsWithResponse request returning *ListExperimentsResponse
func (c *ClientWithResponses) ListExperimentsWithResponse(ctx context.Context, projectId int64, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*ListExperimentsResponse, error) {
	rsp, err := c.ListExperiments(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperimentsResponse(rsp)
}

// CreateExperimentWithBodyWithResponse request with arbitrary body returning *CreateExperimentResponse
func (c *ClientWithResponses) CreateExperimentWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExperimentResponse, error) {
	rsp, err := c.CreateExperimentWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExperimentResponse(rsp)
}

func (c *ClientWithResponses) CreateExperimentWithResponse(ctx context.Context, projectId int64, body CreateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExperimentResponse, error) {
	rsp, err := c.CreateExperiment(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExperimentResponse(rsp)
}

// GetExperimentWithResponse request returning *GetExperimentResponse
func (c *ClientWithResponses) GetExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*GetExperimentResponse, error) {
	rsp, err := c.GetExperiment(ctx, projectId, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentResponse(rsp)
}

// UpdateExperimentWithBodyWithResponse request with arbitrary body returning *UpdateExperimentResponse
func (c *ClientWithResponses) UpdateExperimentWithBodyWithResponse(ctx context.Context, projectId int64, experimentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExperimentResponse, error) {
	rsp, err := c.UpdateExperimentWithBody(ctx, projectId, experimentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExperimentResponse(rsp)
}

func (c *ClientWithResponses) UpdateExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, body UpdateExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExperimentResponse, error) {
	rsp, err := c.UpdateExperiment(ctx, projectId, experimentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExperimentResponse(rsp)
}

// DisableExperimentWithResponse request returning *DisableExperimentResponse
func (c *ClientWithResponses) DisableExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*DisableExperimentResponse, error) {
	rsp, err := c.DisableExperiment(ctx, projectId, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableExperimentResponse(rsp)
}

// EnableExperimentWithResponse request returning *EnableExperimentResponse
func (c *ClientWithResponses) EnableExperimentWithResponse(ctx context.Context, projectId int64, experimentId int64, reqEditors ...RequestEditorFn) (*EnableExperimentResponse, error) {
	rsp, err := c.EnableExperiment(ctx, projectId, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableExperimentResponse(rsp)
}

// ListExperimentHistoryWithResponse request returning *ListExperimentHistoryResponse
func (c *ClientWithResponses) ListExperimentHistoryWithResponse(ctx context.Context, projectId int64, experimentId int64, params *ListExperimentHistoryParams, reqEditors ...RequestEditorFn) (*ListExperimentHistoryResponse, error) {
	rsp, err := c.ListExperimentHistory(ctx, projectId, experimentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperimentHistoryResponse(rsp)
}

// GetExperimentHistoryWithResponse request returning *GetExperimentHistoryResponse
func (c *ClientWithResponses) GetExperimentHistoryWithResponse(ctx context.Context, projectId int64, experimentId int64, version int64, reqEditors ...RequestEditorFn) (*GetExperimentHistoryResponse, error) {
	rsp, err := c.GetExperimentHistory(ctx, projectId, experimentId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentHistoryResponse(rsp)
}

// ListSegmentersWithResponse request returning *ListSegmentersResponse
func (c *ClientWithResponses) ListSegmentersWithResponse(ctx context.Context, projectId int64, params *ListSegmentersParams, reqEditors ...RequestEditorFn) (*ListSegmentersResponse, error) {
	rsp, err := c.ListSegmenters(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSegmentersResponse(rsp)
}

// CreateSegmenterWithBodyWithResponse request with arbitrary body returning *CreateSegmenterResponse
func (c *ClientWithResponses) CreateSegmenterWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmenterResponse, error) {
	rsp, err := c.CreateSegmenterWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmenterResponse(rsp)
}

func (c *ClientWithResponses) CreateSegmenterWithResponse(ctx context.Context, projectId int64, body CreateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmenterResponse, error) {
	rsp, err := c.CreateSegmenter(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmenterResponse(rsp)
}

// DeleteSegmenterWithResponse request returning *DeleteSegmenterResponse
func (c *ClientWithResponses) DeleteSegmenterWithResponse(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*DeleteSegmenterResponse, error) {
	rsp, err := c.DeleteSegmenter(ctx, projectId, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSegmenterResponse(rsp)
}

// GetSegmenterWithResponse request returning *GetSegmenterResponse
func (c *ClientWithResponses) GetSegmenterWithResponse(ctx context.Context, projectId int64, name string, reqEditors ...RequestEditorFn) (*GetSegmenterResponse, error) {
	rsp, err := c.GetSegmenter(ctx, projectId, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmenterResponse(rsp)
}

// UpdateSegmenterWithBodyWithResponse request with arbitrary body returning *UpdateSegmenterResponse
func (c *ClientWithResponses) UpdateSegmenterWithBodyWithResponse(ctx context.Context, projectId int64, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmenterResponse, error) {
	rsp, err := c.UpdateSegmenterWithBody(ctx, projectId, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmenterResponse(rsp)
}

func (c *ClientWithResponses) UpdateSegmenterWithResponse(ctx context.Context, projectId int64, name string, body UpdateSegmenterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmenterResponse, error) {
	rsp, err := c.UpdateSegmenter(ctx, projectId, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmenterResponse(rsp)
}

// ListSegmentsWithResponse request returning *ListSegmentsResponse
func (c *ClientWithResponses) ListSegmentsWithResponse(ctx context.Context, projectId int64, params *ListSegmentsParams, reqEditors ...RequestEditorFn) (*ListSegmentsResponse, error) {
	rsp, err := c.ListSegments(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSegmentsResponse(rsp)
}

// CreateSegmentWithBodyWithResponse request with arbitrary body returning *CreateSegmentResponse
func (c *ClientWithResponses) CreateSegmentWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error) {
	rsp, err := c.CreateSegmentWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmentResponse(rsp)
}

func (c *ClientWithResponses) CreateSegmentWithResponse(ctx context.Context, projectId int64, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error) {
	rsp, err := c.CreateSegment(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmentResponse(rsp)
}

// DeleteSegmentWithResponse request returning *DeleteSegmentResponse
func (c *ClientWithResponses) DeleteSegmentWithResponse(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*DeleteSegmentResponse, error) {
	rsp, err := c.DeleteSegment(ctx, projectId, segmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSegmentResponse(rsp)
}

// GetSegmentWithResponse request returning *GetSegmentResponse
func (c *ClientWithResponses) GetSegmentWithResponse(ctx context.Context, projectId int64, segmentId int64, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error) {
	rsp, err := c.GetSegment(ctx, projectId, segmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentResponse(rsp)
}

// UpdateSegmentWithBodyWithResponse request with arbitrary body returning *UpdateSegmentResponse
func (c *ClientWithResponses) UpdateSegmentWithBodyWithResponse(ctx context.Context, projectId int64, segmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error) {
	rsp, err := c.UpdateSegmentWithBody(ctx, projectId, segmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateSegmentWithResponse(ctx context.Context, projectId int64, segmentId int64, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error) {
	rsp, err := c.UpdateSegment(ctx, projectId, segmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmentResponse(rsp)
}

// ListSegmentHistoryWithResponse request returning *ListSegmentHistoryResponse
func (c *ClientWithResponses) ListSegmentHistoryWithResponse(ctx context.Context, projectId int64, segmentId int64, params *ListSegmentHistoryParams, reqEditors ...RequestEditorFn) (*ListSegmentHistoryResponse, error) {
	rsp, err := c.ListSegmentHistory(ctx, projectId, segmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSegmentHistoryResponse(rsp)
}

// GetSegmentHistoryWithResponse request returning *GetSegmentHistoryResponse
func (c *ClientWithResponses) GetSegmentHistoryWithResponse(ctx context.Context, projectId int64, segmentId int64, version int64, reqEditors ...RequestEditorFn) (*GetSegmentHistoryResponse, error) {
	rsp, err := c.GetSegmentHistory(ctx, projectId, segmentId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentHistoryResponse(rsp)
}

// GetProjectSettingsWithResponse request returning *GetProjectSettingsResponse
func (c *ClientWithResponses) GetProjectSettingsWithResponse(ctx context.Context, projectId int64, reqEditors ...RequestEditorFn) (*GetProjectSettingsResponse, error) {
	rsp, err := c.GetProjectSettings(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectSettingsResponse(rsp)
}

// CreateProjectSettingsWithBodyWithResponse request with arbitrary body returning *CreateProjectSettingsResponse
func (c *ClientWithResponses) CreateProjectSettingsWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectSettingsResponse, error) {
	rsp, err := c.CreateProjectSettingsWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectSettingsResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectSettingsWithResponse(ctx context.Context, projectId int64, body CreateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectSettingsResponse, error) {
	rsp, err := c.CreateProjectSettings(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectSettingsResponse(rsp)
}

// UpdateProjectSettingsWithBodyWithResponse request with arbitrary body returning *UpdateProjectSettingsResponse
func (c *ClientWithResponses) UpdateProjectSettingsWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectSettingsResponse, error) {
	rsp, err := c.UpdateProjectSettingsWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectSettingsResponse(rsp)
}

func (c *ClientWithResponses) UpdateProjectSettingsWithResponse(ctx context.Context, projectId int64, body UpdateProjectSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectSettingsResponse, error) {
	rsp, err := c.UpdateProjectSettings(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectSettingsResponse(rsp)
}

// ListTreatmentsWithResponse request returning *ListTreatmentsResponse
func (c *ClientWithResponses) ListTreatmentsWithResponse(ctx context.Context, projectId int64, params *ListTreatmentsParams, reqEditors ...RequestEditorFn) (*ListTreatmentsResponse, error) {
	rsp, err := c.ListTreatments(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTreatmentsResponse(rsp)
}

// CreateTreatmentWithBodyWithResponse request with arbitrary body returning *CreateTreatmentResponse
func (c *ClientWithResponses) CreateTreatmentWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTreatmentResponse, error) {
	rsp, err := c.CreateTreatmentWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTreatmentResponse(rsp)
}

func (c *ClientWithResponses) CreateTreatmentWithResponse(ctx context.Context, projectId int64, body CreateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTreatmentResponse, error) {
	rsp, err := c.CreateTreatment(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTreatmentResponse(rsp)
}

// DeleteTreatmentWithResponse request returning *DeleteTreatmentResponse
func (c *ClientWithResponses) DeleteTreatmentWithResponse(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*DeleteTreatmentResponse, error) {
	rsp, err := c.DeleteTreatment(ctx, projectId, treatmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTreatmentResponse(rsp)
}

// GetTreatmentWithResponse request returning *GetTreatmentResponse
func (c *ClientWithResponses) GetTreatmentWithResponse(ctx context.Context, projectId int64, treatmentId int64, reqEditors ...RequestEditorFn) (*GetTreatmentResponse, error) {
	rsp, err := c.GetTreatment(ctx, projectId, treatmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTreatmentResponse(rsp)
}

// UpdateTreatmentWithBodyWithResponse request with arbitrary body returning *UpdateTreatmentResponse
func (c *ClientWithResponses) UpdateTreatmentWithBodyWithResponse(ctx context.Context, projectId int64, treatmentId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTreatmentResponse, error) {
	rsp, err := c.UpdateTreatmentWithBody(ctx, projectId, treatmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTreatmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateTreatmentWithResponse(ctx context.Context, projectId int64, treatmentId int64, body UpdateTreatmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTreatmentResponse, error) {
	rsp, err := c.UpdateTreatment(ctx, projectId, treatmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTreatmentResponse(rsp)
}

// ListTreatmentHistoryWithResponse request returning *ListTreatmentHistoryResponse
func (c *ClientWithResponses) ListTreatmentHistoryWithResponse(ctx context.Context, projectId int64, treatmentId int64, params *ListTreatmentHistoryParams, reqEditors ...RequestEditorFn) (*ListTreatmentHistoryResponse, error) {
	rsp, err := c.ListTreatmentHistory(ctx, projectId, treatmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTreatmentHistoryResponse(rsp)
}

// GetTreatmentHistoryWithResponse request returning *GetTreatmentHistoryResponse
func (c *ClientWithResponses) GetTreatmentHistoryWithResponse(ctx context.Context, projectId int64, treatmentId int64, version int64, reqEditors ...RequestEditorFn) (*GetTreatmentHistoryResponse, error) {
	rsp, err := c.GetTreatmentHistory(ctx, projectId, treatmentId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTreatmentHistoryResponse(rsp)
}

// GetTreatmentServiceConfigWithResponse request returning *GetTreatmentServiceConfigResponse
func (c *ClientWithResponses) GetTreatmentServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTreatmentServiceConfigResponse, error) {
	rsp, err := c.GetTreatmentServiceConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTreatmentServiceConfigResponse(rsp)
}

// ValidateEntityWithBodyWithResponse request with arbitrary body returning *ValidateEntityResponse
func (c *ClientWithResponses) ValidateEntityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateEntityResponse, error) {
	rsp, err := c.ValidateEntityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateEntityResponse(rsp)
}

func (c *ClientWithResponses) ValidateEntityWithResponse(ctx context.Context, body ValidateEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateEntityResponse, error) {
	rsp, err := c.ValidateEntity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateEntityResponse(rsp)
}

// ParseListProjectsResponse parses an HTTP response from a ListProjectsWithResponse call
func ParseListProjectsResponse(rsp *http.Response) (*ListProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []externalRef0.Project `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectExperimentVariablesResponse parses an HTTP response from a GetProjectExperimentVariablesWithResponse call
func ParseGetProjectExperimentVariablesResponse(rsp *http.Response) (*GetProjectExperimentVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectExperimentVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []string `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListExperimentsResponse parses an HTTP response from a ListExperimentsWithResponse call
func ParseListExperimentsResponse(rsp *http.Response) (*ListExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   []externalRef0.Experiment `json:"data"`
			Paging *externalRef0.Paging      `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateExperimentResponse parses an HTTP response from a CreateExperimentWithResponse call
func ParseCreateExperimentResponse(rsp *http.Response) (*CreateExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Experiment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetExperimentResponse parses an HTTP response from a GetExperimentWithResponse call
func ParseGetExperimentResponse(rsp *http.Response) (*GetExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Experiment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateExperimentResponse parses an HTTP response from a UpdateExperimentWithResponse call
func ParseUpdateExperimentResponse(rsp *http.Response) (*UpdateExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Experiment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDisableExperimentResponse parses an HTTP response from a DisableExperimentWithResponse call
func ParseDisableExperimentResponse(rsp *http.Response) (*DisableExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DisableExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEnableExperimentResponse parses an HTTP response from a EnableExperimentWithResponse call
func ParseEnableExperimentResponse(rsp *http.Response) (*EnableExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EnableExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListExperimentHistoryResponse parses an HTTP response from a ListExperimentHistoryWithResponse call
func ParseListExperimentHistoryResponse(rsp *http.Response) (*ListExperimentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListExperimentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   []externalRef0.ExperimentHistory `json:"data"`
			Paging *externalRef0.Paging             `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetExperimentHistoryResponse parses an HTTP response from a GetExperimentHistoryWithResponse call
func ParseGetExperimentHistoryResponse(rsp *http.Response) (*GetExperimentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.ExperimentHistory `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSegmentersResponse parses an HTTP response from a ListSegmentersWithResponse call
func ParseListSegmentersResponse(rsp *http.Response) (*ListSegmentersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSegmentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []externalRef0.Segmenter `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSegmenterResponse parses an HTTP response from a CreateSegmenterWithResponse call
func ParseCreateSegmenterResponse(rsp *http.Response) (*CreateSegmenterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSegmenterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Segmenter `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSegmenterResponse parses an HTTP response from a DeleteSegmenterWithResponse call
func ParseDeleteSegmenterResponse(rsp *http.Response) (*DeleteSegmenterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSegmenterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSegmenterResponse parses an HTTP response from a GetSegmenterWithResponse call
func ParseGetSegmenterResponse(rsp *http.Response) (*GetSegmenterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSegmenterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Segmenter `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSegmenterResponse parses an HTTP response from a UpdateSegmenterWithResponse call
func ParseUpdateSegmenterResponse(rsp *http.Response) (*UpdateSegmenterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSegmenterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Segmenter `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSegmentsResponse parses an HTTP response from a ListSegmentsWithResponse call
func ParseListSegmentsResponse(rsp *http.Response) (*ListSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   []externalRef0.Segment `json:"data"`
			Paging *externalRef0.Paging   `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSegmentResponse parses an HTTP response from a CreateSegmentWithResponse call
func ParseCreateSegmentResponse(rsp *http.Response) (*CreateSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Segment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSegmentResponse parses an HTTP response from a DeleteSegmentWithResponse call
func ParseDeleteSegmentResponse(rsp *http.Response) (*DeleteSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id *int `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSegmentResponse parses an HTTP response from a GetSegmentWithResponse call
func ParseGetSegmentResponse(rsp *http.Response) (*GetSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Segment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSegmentResponse parses an HTTP response from a UpdateSegmentWithResponse call
func ParseUpdateSegmentResponse(rsp *http.Response) (*UpdateSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Segment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSegmentHistoryResponse parses an HTTP response from a ListSegmentHistoryWithResponse call
func ParseListSegmentHistoryResponse(rsp *http.Response) (*ListSegmentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSegmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   []externalRef0.SegmentHistory `json:"data"`
			Paging *externalRef0.Paging          `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSegmentHistoryResponse parses an HTTP response from a GetSegmentHistoryWithResponse call
func ParseGetSegmentHistoryResponse(rsp *http.Response) (*GetSegmentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.SegmentHistory `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectSettingsResponse parses an HTTP response from a GetProjectSettingsWithResponse call
func ParseGetProjectSettingsResponse(rsp *http.Response) (*GetProjectSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.ProjectSettings `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectSettingsResponse parses an HTTP response from a CreateProjectSettingsWithResponse call
func ParseCreateProjectSettingsResponse(rsp *http.Response) (*CreateProjectSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.ProjectSettings `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateProjectSettingsResponse parses an HTTP response from a UpdateProjectSettingsWithResponse call
func ParseUpdateProjectSettingsResponse(rsp *http.Response) (*UpdateProjectSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.ProjectSettings `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListTreatmentsResponse parses an HTTP response from a ListTreatmentsWithResponse call
func ParseListTreatmentsResponse(rsp *http.Response) (*ListTreatmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTreatmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   []externalRef0.Treatment `json:"data"`
			Paging *externalRef0.Paging     `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTreatmentResponse parses an HTTP response from a CreateTreatmentWithResponse call
func ParseCreateTreatmentResponse(rsp *http.Response) (*CreateTreatmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTreatmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Treatment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTreatmentResponse parses an HTTP response from a DeleteTreatmentWithResponse call
func ParseDeleteTreatmentResponse(rsp *http.Response) (*DeleteTreatmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTreatmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id *int `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTreatmentResponse parses an HTTP response from a GetTreatmentWithResponse call
func ParseGetTreatmentResponse(rsp *http.Response) (*GetTreatmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTreatmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Treatment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateTreatmentResponse parses an HTTP response from a UpdateTreatmentWithResponse call
func ParseUpdateTreatmentResponse(rsp *http.Response) (*UpdateTreatmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTreatmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.Treatment `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListTreatmentHistoryResponse parses an HTTP response from a ListTreatmentHistoryWithResponse call
func ParseListTreatmentHistoryResponse(rsp *http.Response) (*ListTreatmentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTreatmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   []externalRef0.TreatmentHistory `json:"data"`
			Paging *externalRef0.Paging            `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTreatmentHistoryResponse parses an HTTP response from a GetTreatmentHistoryWithResponse call
func ParseGetTreatmentHistoryResponse(rsp *http.Response) (*GetTreatmentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTreatmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.TreatmentHistory `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTreatmentServiceConfigResponse parses an HTTP response from a GetTreatmentServiceConfigWithResponse call
func ParseGetTreatmentServiceConfigResponse(rsp *http.Response) (*GetTreatmentServiceConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTreatmentServiceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data externalRef0.TreatmentServiceConfig `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseValidateEntityResponse parses an HTTP response from a ValidateEntityWithResponse call
func ParseValidateEntityResponse(rsp *http.Response) (*ValidateEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ValidateEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
